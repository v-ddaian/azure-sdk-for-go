package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// FeatureStateClient is the client for the FeatureState methods of the Creator service.
type FeatureStateClient struct {
    BaseClient
}
// NewFeatureStateClient creates an instance of the FeatureStateClient client.
func NewFeatureStateClient(xMsClientID string) FeatureStateClient {
    return FeatureStateClient{ New(xMsClientID)}
}

// CreateStateset **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This POST API allows the user to create a new Stateset and define stateset style using request body.
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Feature State API is part of Creator.
//
// The Feature State service allows the user to update the states of a feature and query them to be used in other
// services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
//
// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for
// feature states for a dataset.
//
// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current
// feature states. A feature can have only one state at a given point in time.
//
// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure
// Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored timestamp.
//
// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State
// Tile documentation for more information.
    // Parameters:
        // datasetID - the datasetId must have been obtained from a successful [Dataset Create
        // API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call.
        // statesetCreateRequestBody - the stateset style JSON data.
        // description - description for the stateset. Max length allowed is 1000.
func (client FeatureStateClient) CreateStateset(ctx context.Context, datasetID string, statesetCreateRequestBody StylesObject, description string) (result StatesetCreatedResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.CreateStateset")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreateStatesetPreparer(ctx, datasetID, statesetCreateRequestBody, description)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "CreateStateset", nil , "Failure preparing request")
    return
    }

        resp, err := client.CreateStatesetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "CreateStateset", resp, "Failure sending request")
        return
        }

        result, err = client.CreateStatesetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "CreateStateset", resp, "Failure responding to request")
        return
        }

    return
}

    // CreateStatesetPreparer prepares the CreateStateset request.
    func (client FeatureStateClient) CreateStatesetPreparer(ctx context.Context, datasetID string, statesetCreateRequestBody StylesObject, description string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "datasetId": autorest.Encode("query",datasetID),
    }
        if len(description) > 0 {
        queryParameters["description"] = autorest.Encode("query",description)
        }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/featureStateSets"),
autorest.WithJSON(statesetCreateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateStatesetSender sends the CreateStateset request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) CreateStatesetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CreateStatesetResponder handles the response to the CreateStateset request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) CreateStatesetResponder(resp *http.Response) (result StatesetCreatedResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeleteState **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API deletes the state information identified by the StateKeyName parameter for the feature identified by the
// FeatureId parameter in the the stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given stateset. If no state was set for the featureId in the stateset
        // earlier, Bad Request response will be returned.
        // stateKeyName - the Name of the state to be deleted.
func (client FeatureStateClient) DeleteState(ctx context.Context, statesetID string, featureID string, stateKeyName string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.DeleteState")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteStatePreparer(ctx, statesetID, featureID, stateKeyName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteState", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteStateSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteState", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteStateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteState", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteStatePreparer prepares the DeleteState request.
    func (client FeatureStateClient) DeleteStatePreparer(ctx context.Context, statesetID string, featureID string, stateKeyName string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "featureId": autorest.Encode("path",featureID),
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "stateKeyName": autorest.Encode("query",stateKeyName),
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}/featureStates/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteStateSender sends the DeleteState request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) DeleteStateSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteStateResponder handles the response to the DeleteState request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) DeleteStateResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// DeleteStateset **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This DELETE API allows the user to delete the stateset and the associated data.
    // Parameters:
        // statesetID - the stateset id that was created.
func (client FeatureStateClient) DeleteStateset(ctx context.Context, statesetID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.DeleteStateset")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteStatesetPreparer(ctx, statesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteStateset", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteStatesetSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteStateset", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteStatesetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "DeleteStateset", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteStatesetPreparer prepares the DeleteStateset request.
    func (client FeatureStateClient) DeleteStatesetPreparer(ctx context.Context, statesetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteStatesetSender sends the DeleteStateset request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) DeleteStatesetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteStatesetResponder handles the response to the DeleteStateset request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) DeleteStatesetResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetStates **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API returns the current state information associated with the given feature in the given stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given stateset. If no state was set for the featureId in the stateset
        // earlier, Bad Request response will be returned.
func (client FeatureStateClient) GetStates(ctx context.Context, statesetID string, featureID string) (result FeatureStatesStructure, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.GetStates")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetStatesPreparer(ctx, statesetID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStates", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetStatesSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStates", resp, "Failure sending request")
        return
        }

        result, err = client.GetStatesResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStates", resp, "Failure responding to request")
        return
        }

    return
}

    // GetStatesPreparer prepares the GetStates request.
    func (client FeatureStateClient) GetStatesPreparer(ctx context.Context, statesetID string, featureID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "featureId": autorest.Encode("path",featureID),
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}/featureStates/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetStatesSender sends the GetStates request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) GetStatesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetStatesResponder handles the response to the GetStates request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) GetStatesResponder(resp *http.Response) (result FeatureStatesStructure, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetStateset **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This GET API allows the user to get the stateset Information.
//
// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
func (client FeatureStateClient) GetStateset(ctx context.Context, statesetID string) (result StatesetGetResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.GetStateset")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetStatesetPreparer(ctx, statesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStateset", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetStatesetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStateset", resp, "Failure sending request")
        return
        }

        result, err = client.GetStatesetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "GetStateset", resp, "Failure responding to request")
        return
        }

    return
}

    // GetStatesetPreparer prepares the GetStateset request.
    func (client FeatureStateClient) GetStatesetPreparer(ctx context.Context, statesetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetStatesetSender sends the GetStateset request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) GetStatesetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetStatesetResponder handles the response to the GetStateset request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) GetStatesetResponder(resp *http.Response) (result StatesetGetResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListStateset **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a list of all previously successfully created statesets.
func (client FeatureStateClient) ListStateset(ctx context.Context) (result StatesetListResponsePage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.ListStateset")
        defer func() {
            sc := -1
        if result.slr.Response.Response != nil {
        sc = result.slr.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listStatesetNextResults
    req, err := client.ListStatesetPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "ListStateset", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListStatesetSender(req)
        if err != nil {
        result.slr.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "ListStateset", resp, "Failure sending request")
        return
        }

        result.slr, err = client.ListStatesetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "ListStateset", resp, "Failure responding to request")
        return
        }
            if result.slr.hasNextLink() && result.slr.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListStatesetPreparer prepares the ListStateset request.
    func (client FeatureStateClient) ListStatesetPreparer(ctx context.Context) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/featureStateSets"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListStatesetSender sends the ListStateset request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) ListStatesetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListStatesetResponder handles the response to the ListStateset request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) ListStatesetResponder(resp *http.Response) (result StatesetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listStatesetNextResults retrieves the next set of results, if any.
            func (client FeatureStateClient) listStatesetNextResults(ctx context.Context, lastResults StatesetListResponse) (result StatesetListResponse, err error) {
            req, err := lastResults.statesetListResponsePreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "creator.FeatureStateClient", "listStatesetNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListStatesetSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "creator.FeatureStateClient", "listStatesetNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListStatesetResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "listStatesetNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListStatesetComplete enumerates all values, automatically crossing page boundaries as required.
            func (client FeatureStateClient) ListStatesetComplete(ctx context.Context) (result StatesetListResponseIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.ListStateset")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.ListStateset(ctx)
                            return
            }

// PutStateset **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This PUT API allows the user to update the stateset style rules.
    // Parameters:
        // statesetID - the stateset id that was created.
        // statesetStyleUpdateRequestBody - the stateset style JSON data. Only style rules are allowed to be updated,
        // update on keyname and type is not allowed.
func (client FeatureStateClient) PutStateset(ctx context.Context, statesetID string, statesetStyleUpdateRequestBody StylesObject) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.PutStateset")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.PutStatesetPreparer(ctx, statesetID, statesetStyleUpdateRequestBody)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "PutStateset", nil , "Failure preparing request")
    return
    }

        resp, err := client.PutStatesetSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "PutStateset", resp, "Failure sending request")
        return
        }

        result, err = client.PutStatesetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "PutStateset", resp, "Failure responding to request")
        return
        }

    return
}

    // PutStatesetPreparer prepares the PutStateset request.
    func (client FeatureStateClient) PutStatesetPreparer(ctx context.Context, statesetID string, statesetStyleUpdateRequestBody StylesObject) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}",pathParameters),
autorest.WithJSON(statesetStyleUpdateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // PutStatesetSender sends the PutStateset request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) PutStatesetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // PutStatesetResponder handles the response to the PutStateset request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) PutStatesetResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// UpdateStates **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This PUT API allows the user to update the state of the given feature in the given stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
        // Request response will be returned.
        // featureStateUpdateRequestBody - the feature state JSON data. A feature can have only one state at a given
        // point in time. The specified state keyname must have been defined during the stateset creation.
func (client FeatureStateClient) UpdateStates(ctx context.Context, statesetID string, featureID string, featureStateUpdateRequestBody FeatureStatesStructure) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.UpdateStates")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.UpdateStatesPreparer(ctx, statesetID, featureID, featureStateUpdateRequestBody)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "UpdateStates", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateStatesSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "UpdateStates", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateStatesResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.FeatureStateClient", "UpdateStates", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdateStatesPreparer prepares the UpdateStates request.
    func (client FeatureStateClient) UpdateStatesPreparer(ctx context.Context, statesetID string, featureID string, featureStateUpdateRequestBody FeatureStatesStructure) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "featureId": autorest.Encode("path",featureID),
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/featureStateSets/{statesetId}/featureStates/{featureId}",pathParameters),
autorest.WithJSON(featureStateUpdateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateStatesSender sends the UpdateStates request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) UpdateStatesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // UpdateStatesResponder handles the response to the UpdateStates request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) UpdateStatesResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
            result.Response = resp
            return
    }

