package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// TilesetClient is the client for the Tileset methods of the Creator service.
type TilesetClient struct {
    BaseClient
}
// NewTilesetClient creates an instance of the TilesetClient client.
func NewTilesetClient(xMsClientID string) TilesetClient {
    return TilesetClient{ New(xMsClientID)}
}

// Create **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that
// can be consumed
// from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a dataset, use the
// [DataSet Create API](/rest/api/maps/dataset/createpreview).
//
// ## Submit Create Request
//
// To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will be
// used as the source of the tileset data.
//
// The Create Tileset API is a
// [long-running request](https://aka.ms/am-creator-lrt-v2).
    // Parameters:
        // datasetID - the unique `datasetId` that the tileset create API uses to retrieve features to generate tiles.
        // The `datasetId` must have been obtained from a successful [Dataset Create
        // API](/en-us/rest/api/maps/dataset/createpreview) call.
        // description - user provided description of the tileset.
func (client TilesetClient) Create(ctx context.Context, datasetID string, description string) (result TilesetCreateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.Create")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreparer(ctx, datasetID, description)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Create", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Create", nil , "Failure sending request")
        return
        }

    return
}

    // CreatePreparer prepares the Create request.
    func (client TilesetClient) CreatePreparer(ctx context.Context, datasetID string, description string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "datasetId": autorest.Encode("query",datasetID),
    }
        if len(description) > 0 {
        queryParameters["description"] = autorest.Encode("query",description)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/tilesets"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateSender sends the Create request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) CreateSender(req *http.Request) (future TilesetCreateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // CreateResponder handles the response to the Create request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) CreateResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to delete a created tileset.<br>
// You can use this API if a tileset is no longer needed.
//
// ### Submit Delete Request
//
// To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the tileset
// to delete.<br>
//
// #### Delete request "Successful"
//
// The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted
// successfully.<br>
//
// #### Delete request "Failed"
//
// A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not found.
//
// Here is a sample error response:
//
// <br>
//
// ```json
// {
// "error": {
// "code": "400 BadRequest",
// "message": "Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist."
// }
// }
// ```
    // Parameters:
        // tilesetID - the Tileset Id
func (client TilesetClient) Delete(ctx context.Context, tilesetID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, tilesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Delete", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client TilesetClient) DeletePreparer(ctx context.Context, tilesetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "tilesetId": autorest.Encode("path",tilesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/tilesets/{tilesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) DeleteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a tileset.
    // Parameters:
        // tilesetID - the Tileset Id
func (client TilesetClient) Get(ctx context.Context, tilesetID string) (result TilesetDetailInfo, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, tilesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "Get", resp, "Failure responding to request")
        return
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client TilesetClient) GetPreparer(ctx context.Context, tilesetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "tilesetId": autorest.Encode("path",tilesetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/tilesets/{tilesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) GetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) GetResponder(resp *http.Response) (result TilesetDetailInfo, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetOperation this path will be obtained from a call to /tilesets/create.  While in progress, an http200 will be
// returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed.
    // Parameters:
        // operationID - the ID to query the status for the dataset create/import request.
func (client TilesetClient) GetOperation(ctx context.Context, operationID string) (result LongRunningOperationResult, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.GetOperation")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetOperationPreparer(ctx, operationID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.TilesetClient", "GetOperation", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetOperationSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "GetOperation", resp, "Failure sending request")
        return
        }

        result, err = client.GetOperationResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "GetOperation", resp, "Failure responding to request")
        return
        }

    return
}

    // GetOperationPreparer prepares the GetOperation request.
    func (client TilesetClient) GetOperationPreparer(ctx context.Context, operationID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "operationId": autorest.Encode("path",operationID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/tilesets/operations/{operationId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetOperationSender sends the GetOperation request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) GetOperationSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetOperationResponder handles the response to the GetOperation request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) GetOperationResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// List **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a list of all tilesets created.
// <br>
func (client TilesetClient) List(ctx context.Context) (result TilesetListResponsePage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.List")
        defer func() {
            sc := -1
        if result.tlr.Response.Response != nil {
        sc = result.tlr.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.TilesetClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.tlr.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "List", resp, "Failure sending request")
        return
        }

        result.tlr, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.TilesetClient", "List", resp, "Failure responding to request")
        return
        }
            if result.tlr.hasNextLink() && result.tlr.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListPreparer prepares the List request.
    func (client TilesetClient) ListPreparer(ctx context.Context) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/tilesets"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) ListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) ListResponder(resp *http.Response) (result TilesetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client TilesetClient) listNextResults(ctx context.Context, lastResults TilesetListResponse) (result TilesetListResponse, err error) {
            req, err := lastResults.tilesetListResponsePreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "creator.TilesetClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "creator.TilesetClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "creator.TilesetClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client TilesetClient) ListComplete(ctx context.Context) (result TilesetListResponseIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx)
                            return
            }

