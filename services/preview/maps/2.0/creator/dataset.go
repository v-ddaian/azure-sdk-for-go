package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// DatasetClient is the client for the Dataset methods of the Creator service.
type DatasetClient struct {
    BaseClient
}
// NewDatasetClient creates an instance of the DatasetClient client.
func NewDatasetClient(xMsClientID string) DatasetClient {
    return DatasetClient{ New(xMsClientID)}
}

// Create **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to create a dataset from data that was uploaded to the Azure Maps Data Service and
// converted using the Azure Maps Conversion Service.
//
// You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package using
// the Azure Maps Conversion Service, and creating a dataset from the converted zip package. The created dataset can be
// used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS Service.
//
// ### Submit Create Request
//
// To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an ID that
// represents the converted DWG zip package, the `datasetId` parameter will be the ID of a previously created dataset
// to append with the current dataset and, optionally, the `description` query parameter will contain a description (if
// description is not provided a default description will be given).
//
// The Create API is a [long-running request](https://aka.ms/am-creator-lrt-v2).
    // Parameters:
        // conversionID - the unique ID used to create the dataset. The `conversionId` must have been obtained from a
        // successful call to the Conversion Service Convert API and may be provided with multiple query parameters
        // with same name (if more than one is provided).
        // datasetID - the ID for the dataset to append with. The dataset must originate from a previous dataset
        // creation call that matches the datasetId
        // descriptionDataset - the description to be given to the dataset.
func (client DatasetClient) Create(ctx context.Context, conversionID string, datasetID string, descriptionDataset string) (result DatasetCreateFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.Create")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreparer(ctx, conversionID, datasetID, descriptionDataset)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Create", nil , "Failure preparing request")
    return
    }

        result, err = client.CreateSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Create", nil , "Failure sending request")
        return
        }

    return
}

    // CreatePreparer prepares the Create request.
    func (client DatasetClient) CreatePreparer(ctx context.Context, conversionID string, datasetID string, descriptionDataset string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "conversionId": autorest.Encode("query",conversionID),
    }
        if len(datasetID) > 0 {
        queryParameters["datasetId"] = autorest.Encode("query",datasetID)
        }
        if len(descriptionDataset) > 0 {
        queryParameters["description"] = autorest.Encode("query",descriptionDataset)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/datasets"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateSender sends the Create request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) CreateSender(req *http.Request) (future DatasetCreateFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // CreateResponder handles the response to the Create request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) CreateResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// You can also use this API to delete old/unused datasets to create space for new Creator content.
//
// ### Submit Delete Request
//
// To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the dataset
// to delete.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client DatasetClient) Delete(ctx context.Context, datasetID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Delete", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client DatasetClient) DeletePreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/datasets/{datasetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) DeleteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// Get **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a previously successfully created dataset.
//
// ### Submit Get Details Request
//
// To get the details for a previously created dataset, you will issue a `GET` request with the `datasetId` in the
// path.
//
// ### Get Details Response
//
// The Get Details API returns the details for a dataset in `json` format. The response contains the following fields
// (if they are not null or empty):
// > created - The timestamp the dataset was created.
// > datasetId - The id for the dataset.
// > description - The description for the dataset.
// > datasetSources - The source data that was used when the create request was issued.
// > ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that
// was used in the conversion service for the input data.<br/>
//
// The `datasetSources` describes the source data that was used when the create request was issued and contains the
// following elements (if they are not null or empty):
// > conversionIds - The list of `conversionId` (null if none were provided).
// > appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
// >featureCounts - The counts for each feature type in the dataset.<br/>
//
// Here's a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of
// a dataset resource:
//
// ```json
// {
// "timestamp": "2020-01-01T22:50:48.123Z",
// "datasetId": "f6495f62-94f8-0ec2-c252-45626f82fcb2",
// "description": "Some description or comment for the dataset.",
// "datasetSources": {
// "conversionIds": [
// "15d21452-c9bb-27b6-5e79-743ca5c3205d"
// ],
// },
// "ontology": "facility-2.0",
// "featureCounts": {
// "directoryInfo": 2,
// "category": 10,
// "facility": 1,
// "level": 3,
// "unit": 183,
// "zone": 3,
// "verticalPenetration": 6,
// "opening": 48,
// "areaElement": 108
// }
// }
// ```
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client DatasetClient) Get(ctx context.Context, datasetID string) (result DatasetDetailInfo, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.Get")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetPreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Get", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Get", resp, "Failure sending request")
        return
        }

        result, err = client.GetResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "Get", resp, "Failure responding to request")
        return
        }

    return
}

    // GetPreparer prepares the Get request.
    func (client DatasetClient) GetPreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/datasets/{datasetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSender sends the Get request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) GetSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetResponder handles the response to the Get request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) GetResponder(resp *http.Response) (result DatasetDetailInfo, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetOperation this API allows the caller to view the current progress of a dataset operation and the path is obtained
// from a call to the Create API.
//
// ### Submit Operations Request
//
// To view the current progress of a dataset operation, you will use a `GET` request where the `operationId` given the
// path is the ID that represents the operation.
//
// ### Operation Response
//
// While in progress, a `200-OK` http status code will be returned with no extra headers. If the operation succeeds, a
// `200-OK` http status code with Resource-Location header will be returned.
    // Parameters:
        // operationID - the ID to query the status for the dataset create/import request.
func (client DatasetClient) GetOperation(ctx context.Context, operationID string) (result LongRunningOperationResult, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.GetOperation")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetOperationPreparer(ctx, operationID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.DatasetClient", "GetOperation", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetOperationSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "GetOperation", resp, "Failure sending request")
        return
        }

        result, err = client.GetOperationResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "GetOperation", resp, "Failure responding to request")
        return
        }

    return
}

    // GetOperationPreparer prepares the GetOperation request.
    func (client DatasetClient) GetOperationPreparer(ctx context.Context, operationID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "operationId": autorest.Encode("path",operationID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/datasets/operations/{operationId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetOperationSender sends the GetOperation request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) GetOperationSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetOperationResponder handles the response to the GetOperation request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) GetOperationResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// List **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a list of all previously successfully created datasets.
//
// ### Submit List Request
//
// To list all your datasets, you will issue a `GET` request with no additional parameters.
//
//
// ### List Data Response
//
// The List API returns the complete list of all datasets in `json` format. The response contains the following fields
// (if they are not null or empty):
// > created - The timestamp the dataset was created.
// > datasetId - The id for the dataset.
// > description - The description for the dataset.
// > datasetSources - The source data that was used when the create request was issued.
// > ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that
// was used in the conversion service for the input data.<br/>
//
// The `datasetSources` describes the source data that was used when the create request was issued and contains the
// following elements (if they are not null or empty):
//
// > conversionIds - The list of `conversionId` (null if none were provided).
// > appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
// >featureCounts - The counts for each feature type in the dataset.<br/>
//
// Here's a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of
// 3 dataset resources:
//
//
// ```json
// {
// "datasets": [
// {
// "timestamp": "2020-01-01T22:50:48.123Z",
// "datasetId": "f6495f62-94f8-0ec2-c252-45626f82fcb2",
// "description": "Some description or comment for the dataset.",
// "datasetSources": {
// "conversionIds": [
// "15d21452-c9bb-27b6-5e79-743ca5c3205d"
// ],      },
// "ontology": "facility-2.0",
// "featureCounts": {
// "directoryInfo": 2,
// "category": 10,
// "facility": 1,
// "level": 3,
// "unit": 183,
// "zone": 3,
// "verticalPenetration": 6,
// "opening": 48,
// "areaElement": 108
// }
// },
// {
// "timestamp": "2020-01-01T22:57:53.123Z",
// "datasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c",
// "description": "Create from upload '0c1288fa-2058-4a1b-b68d-13a5f5af7d7c'.",
// "datasetSources": {
// "conversionIds": [
// "0c1288fa-2058-4a1b-b68d-13a5f5af7d7c"
// ],
// "appendDatasetId": "46d1edb6-d29e-4786-9589-dbd4efd7a977"
// },
// "ontology": "facility-2.0",
// "featureCounts": {
// "directoryInfo": 2,
// "category": 10,
// "facility": 1,
// "level": 3,
// "unit": 183,
// "zone": 3,
// "verticalPenetration": 6,
// "opening": 48,
// "areaElement": 108
// }
// }
// ]
// }
// ```
func (client DatasetClient) List(ctx context.Context) (result DatasetListResponsePage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.List")
        defer func() {
            sc := -1
        if result.dlr.Response.Response != nil {
        sc = result.dlr.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.DatasetClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.dlr.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "List", resp, "Failure sending request")
        return
        }

        result.dlr, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.DatasetClient", "List", resp, "Failure responding to request")
        return
        }
            if result.dlr.hasNextLink() && result.dlr.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListPreparer prepares the List request.
    func (client DatasetClient) ListPreparer(ctx context.Context) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/datasets"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) ListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) ListResponder(resp *http.Response) (result DatasetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client DatasetClient) listNextResults(ctx context.Context, lastResults DatasetListResponse) (result DatasetListResponse, err error) {
            req, err := lastResults.datasetListResponsePreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "creator.DatasetClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "creator.DatasetClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "creator.DatasetClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client DatasetClient) ListComplete(ctx context.Context) (result DatasetListResponseIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx)
                            return
            }

