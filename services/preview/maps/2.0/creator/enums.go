package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

        // GeofenceMode enumerates the values for geofence mode.
    type GeofenceMode string

    const (
            // All Publish all the query results to Azure Maps account event subscription.
        All GeofenceMode = "All"
            // EnterAndExit Only publish result when user location is considered as crossing geofencing boarder.
        EnterAndExit GeofenceMode = "EnterAndExit"
            )
    // PossibleGeofenceModeValues returns an array of possible values for the GeofenceMode const type.
    func PossibleGeofenceModeValues() []GeofenceMode {
        return []GeofenceMode{All,EnterAndExit}
    }

        // GeographicResourceLocation enumerates the values for geographic resource location.
    type GeographicResourceLocation string

    const (
            // Eu Used to access an Azure Maps Creator resource in Europe
        Eu GeographicResourceLocation = "eu"
            // Us Used to access an Azure Maps Creator resource in the United States
        Us GeographicResourceLocation = "us"
            )
    // PossibleGeographicResourceLocationValues returns an array of possible values for the GeographicResourceLocation const type.
    func PossibleGeographicResourceLocationValues() []GeographicResourceLocation {
        return []GeographicResourceLocation{Eu,Us}
    }

        // GeoJSONGeometryType enumerates the values for geo json geometry type.
    type GeoJSONGeometryType string

    const (
            // GeoJSONGeometryTypeGeoJSONGeometryCollection `GeoJSON GeometryCollection` geometry.
        GeoJSONGeometryTypeGeoJSONGeometryCollection GeoJSONGeometryType = "GeometryCollection"
            // GeoJSONGeometryTypeGeoJSONLineString `GeoJSON LineString` geometry.
        GeoJSONGeometryTypeGeoJSONLineString GeoJSONGeometryType = "LineString"
            // GeoJSONGeometryTypeGeoJSONMultiLineString `GeoJSON MultiLineString` geometry.
        GeoJSONGeometryTypeGeoJSONMultiLineString GeoJSONGeometryType = "MultiLineString"
            // GeoJSONGeometryTypeGeoJSONMultiPoint `GeoJSON MultiPoint` geometry.
        GeoJSONGeometryTypeGeoJSONMultiPoint GeoJSONGeometryType = "MultiPoint"
            // GeoJSONGeometryTypeGeoJSONMultiPolygon `GeoJSON MultiPolygon` geometry.
        GeoJSONGeometryTypeGeoJSONMultiPolygon GeoJSONGeometryType = "MultiPolygon"
            // GeoJSONGeometryTypeGeoJSONPoint `GeoJSON Point` geometry.
        GeoJSONGeometryTypeGeoJSONPoint GeoJSONGeometryType = "Point"
            // GeoJSONGeometryTypeGeoJSONPolygon `GeoJSON Polygon` geometry.
        GeoJSONGeometryTypeGeoJSONPolygon GeoJSONGeometryType = "Polygon"
            )
    // PossibleGeoJSONGeometryTypeValues returns an array of possible values for the GeoJSONGeometryType const type.
    func PossibleGeoJSONGeometryTypeValues() []GeoJSONGeometryType {
        return []GeoJSONGeometryType{GeoJSONGeometryTypeGeoJSONGeometryCollection,GeoJSONGeometryTypeGeoJSONLineString,GeoJSONGeometryTypeGeoJSONMultiLineString,GeoJSONGeometryTypeGeoJSONMultiPoint,GeoJSONGeometryTypeGeoJSONMultiPolygon,GeoJSONGeometryTypeGeoJSONPoint,GeoJSONGeometryTypeGeoJSONPolygon}
    }

        // GeoJSONObjectType enumerates the values for geo json object type.
    type GeoJSONObjectType string

    const (
            // GeoJSONObjectTypeGeoJSONFeature `GeoJSON Feature` object.
        GeoJSONObjectTypeGeoJSONFeature GeoJSONObjectType = "Feature"
            // GeoJSONObjectTypeGeoJSONFeatureCollection `GeoJSON FeatureCollection` object.
        GeoJSONObjectTypeGeoJSONFeatureCollection GeoJSONObjectType = "FeatureCollection"
            // GeoJSONObjectTypeGeoJSONGeometryCollection `GeoJSON GeometryCollection` geometry.
        GeoJSONObjectTypeGeoJSONGeometryCollection GeoJSONObjectType = "GeometryCollection"
            // GeoJSONObjectTypeGeoJSONLineString `GeoJSON LineString` geometry.
        GeoJSONObjectTypeGeoJSONLineString GeoJSONObjectType = "LineString"
            // GeoJSONObjectTypeGeoJSONMultiLineString `GeoJSON MultiLineString` geometry.
        GeoJSONObjectTypeGeoJSONMultiLineString GeoJSONObjectType = "MultiLineString"
            // GeoJSONObjectTypeGeoJSONMultiPoint `GeoJSON MultiPoint` geometry.
        GeoJSONObjectTypeGeoJSONMultiPoint GeoJSONObjectType = "MultiPoint"
            // GeoJSONObjectTypeGeoJSONMultiPolygon `GeoJSON MultiPolygon` geometry.
        GeoJSONObjectTypeGeoJSONMultiPolygon GeoJSONObjectType = "MultiPolygon"
            // GeoJSONObjectTypeGeoJSONPoint `GeoJSON Point` geometry.
        GeoJSONObjectTypeGeoJSONPoint GeoJSONObjectType = "Point"
            // GeoJSONObjectTypeGeoJSONPolygon `GeoJSON Polygon` geometry.
        GeoJSONObjectTypeGeoJSONPolygon GeoJSONObjectType = "Polygon"
            )
    // PossibleGeoJSONObjectTypeValues returns an array of possible values for the GeoJSONObjectType const type.
    func PossibleGeoJSONObjectTypeValues() []GeoJSONObjectType {
        return []GeoJSONObjectType{GeoJSONObjectTypeGeoJSONFeature,GeoJSONObjectTypeGeoJSONFeatureCollection,GeoJSONObjectTypeGeoJSONGeometryCollection,GeoJSONObjectTypeGeoJSONLineString,GeoJSONObjectTypeGeoJSONMultiLineString,GeoJSONObjectTypeGeoJSONMultiPoint,GeoJSONObjectTypeGeoJSONMultiPolygon,GeoJSONObjectTypeGeoJSONPoint,GeoJSONObjectTypeGeoJSONPolygon}
    }

        // LroStatus enumerates the values for lro status.
    type LroStatus string

    const (
            // Failed The request has one or more failures.
        Failed LroStatus = "Failed"
            // NotStarted The request has not started processing yet.
        NotStarted LroStatus = "NotStarted"
            // Running The request has started processing.
        Running LroStatus = "Running"
            // Succeeded The request has successfully completed.
        Succeeded LroStatus = "Succeeded"
            )
    // PossibleLroStatusValues returns an array of possible values for the LroStatus const type.
    func PossibleLroStatusValues() []LroStatus {
        return []LroStatus{Failed,NotStarted,Running,Succeeded}
    }

        // Type enumerates the values for type.
    type Type string

    const (
                // TypeBoolean ...
        TypeBoolean Type = "boolean"
                // TypeNumber ...
        TypeNumber Type = "number"
                // TypeString ...
        TypeString Type = "string"
                // TypeStyleObject ...
        TypeStyleObject Type = "StyleObject"
            )
    // PossibleTypeValues returns an array of possible values for the Type const type.
    func PossibleTypeValues() []Type {
        return []Type{TypeBoolean,TypeNumber,TypeString,TypeStyleObject}
    }

        // TypeBasicGeoJSONObject enumerates the values for type basic geo json object.
    type TypeBasicGeoJSONObject string

    const (
                // TypeGeoJSONGeometry ...
        TypeGeoJSONGeometry TypeBasicGeoJSONObject = "GeoJsonGeometry"
                // TypeGeoJSONObject ...
        TypeGeoJSONObject TypeBasicGeoJSONObject = "GeoJsonObject"
            )
    // PossibleTypeBasicGeoJSONObjectValues returns an array of possible values for the TypeBasicGeoJSONObject const type.
    func PossibleTypeBasicGeoJSONObjectValues() []TypeBasicGeoJSONObject {
        return []TypeBasicGeoJSONObject{TypeGeoJSONGeometry,TypeGeoJSONObject}
    }

        // UploadDataFormat enumerates the values for upload data format.
    type UploadDataFormat string

    const (
            // Dwgzippackage ZIP package containing DWG file.
        Dwgzippackage UploadDataFormat = "dwgzippackage"
            // Geojson [GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange
            // format.
        Geojson UploadDataFormat = "geojson"
            // Zip Compressed data format.
        Zip UploadDataFormat = "zip"
            )
    // PossibleUploadDataFormatValues returns an array of possible values for the UploadDataFormat const type.
    func PossibleUploadDataFormatValues() []UploadDataFormat {
        return []UploadDataFormat{Dwgzippackage,Geojson,Zip}
    }

