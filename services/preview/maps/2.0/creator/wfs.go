package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// WFSClient is the client for the WFS methods of the Creator service.
type WFSClient struct {
    BaseClient
}
// NewWFSClient creates an instance of the WFSClient client.
func NewWFSClient(xMsClientID string) WFSClient {
    return WFSClient{ New(xMsClientID)}
}

// DeleteFeature **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Delete Feature API deletes the feature identified by the provided id in the given collection. At this point this
// API supports only facility features. Deleting a facility feature deletes all the child features of that facility
// recursively.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // featureID - local identifier of a specific feature
func (client WFSClient) DeleteFeature(ctx context.Context, datasetID string, collectionID string, featureID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.DeleteFeature")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteFeaturePreparer(ctx, datasetID, collectionID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "DeleteFeature", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteFeatureSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "DeleteFeature", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteFeatureResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "DeleteFeature", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteFeaturePreparer prepares the DeleteFeature request.
    func (client WFSClient) DeleteFeaturePreparer(ctx context.Context, datasetID string, collectionID string, featureID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetId": autorest.Encode("path",datasetID),
        "featureId": autorest.Encode("path",featureID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections/{collectionId}/items/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteFeatureSender sends the DeleteFeature request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) DeleteFeatureSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteFeatureResponder handles the response to the DeleteFeature request. The method always
    // closes the http.Response Body.
    func (client WFSClient) DeleteFeatureResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetCollection **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
//
// The Collection Description API provides the description of a given collection. It includes the links to the
// operations that can be performed on the collection.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
func (client WFSClient) GetCollection(ctx context.Context, datasetID string, collectionID string) (result CollectionInfo, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetCollection")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetCollectionPreparer(ctx, datasetID, collectionID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollection", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCollectionSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollection", resp, "Failure sending request")
        return
        }

        result, err = client.GetCollectionResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollection", resp, "Failure responding to request")
        return
        }

    return
}

    // GetCollectionPreparer prepares the GetCollection request.
    func (client WFSClient) GetCollectionPreparer(ctx context.Context, datasetID string, collectionID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections/{collectionId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCollectionSender sends the GetCollection request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetCollectionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetCollectionResponder handles the response to the GetCollection request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetCollectionResponder(resp *http.Response) (result CollectionInfo, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetCollectionDefinition **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for
// Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
//
// The Collection Definition API provides the detailed data model of a given collection.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
func (client WFSClient) GetCollectionDefinition(ctx context.Context, datasetID string, collectionID string) (result CollectionDefinitionResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetCollectionDefinition")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetCollectionDefinitionPreparer(ctx, datasetID, collectionID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollectionDefinition", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCollectionDefinitionSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollectionDefinition", resp, "Failure sending request")
        return
        }

        result, err = client.GetCollectionDefinitionResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollectionDefinition", resp, "Failure responding to request")
        return
        }

    return
}

    // GetCollectionDefinitionPreparer prepares the GetCollectionDefinition request.
    func (client WFSClient) GetCollectionDefinitionPreparer(ctx context.Context, datasetID string, collectionID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections/{collectionId}/definition",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCollectionDefinitionSender sends the GetCollectionDefinition request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetCollectionDefinitionSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetCollectionDefinitionResponder handles the response to the GetCollectionDefinition request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetCollectionDefinitionResponder(resp *http.Response) (result CollectionDefinitionResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetCollections **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Collections Description API provides descriptions of all the collections in a given dataset.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client WFSClient) GetCollections(ctx context.Context, datasetID string) (result CollectionsResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetCollections")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetCollectionsPreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollections", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCollectionsSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollections", resp, "Failure sending request")
        return
        }

        result, err = client.GetCollectionsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetCollections", resp, "Failure responding to request")
        return
        }

    return
}

    // GetCollectionsPreparer prepares the GetCollections request.
    func (client WFSClient) GetCollectionsPreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCollectionsSender sends the GetCollections request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetCollectionsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetCollectionsResponder handles the response to the GetCollections request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetCollectionsResponder(resp *http.Response) (result CollectionsResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetConformance **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Requirements Classes lists all requirements classes specified in the standard that the server conforms to.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client WFSClient) GetConformance(ctx context.Context, datasetID string) (result ConformanceResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetConformance")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetConformancePreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetConformance", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetConformanceSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetConformance", resp, "Failure sending request")
        return
        }

        result, err = client.GetConformanceResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetConformance", resp, "Failure responding to request")
        return
        }

    return
}

    // GetConformancePreparer prepares the GetConformance request.
    func (client WFSClient) GetConformancePreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/conformance",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetConformanceSender sends the GetConformance request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetConformanceSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetConformanceResponder handles the response to the GetConformance request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetConformanceResponder(resp *http.Response) (result ConformanceResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetFeature **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Feature API returns the feature identified by the provided id in the given collection.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // featureID - local identifier of a specific feature
func (client WFSClient) GetFeature(ctx context.Context, datasetID string, collectionID string, featureID string) (result FeatureResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetFeature")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetFeaturePreparer(ctx, datasetID, collectionID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeature", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetFeatureSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeature", resp, "Failure sending request")
        return
        }

        result, err = client.GetFeatureResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeature", resp, "Failure responding to request")
        return
        }

    return
}

    // GetFeaturePreparer prepares the GetFeature request.
    func (client WFSClient) GetFeaturePreparer(ctx context.Context, datasetID string, collectionID string, featureID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetId": autorest.Encode("path",datasetID),
        "featureId": autorest.Encode("path",featureID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections/{collectionId}/items/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetFeatureSender sends the GetFeature request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetFeatureSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetFeatureResponder handles the response to the GetFeature request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetFeatureResponder(resp *http.Response) (result FeatureResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetFeatures **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Features API returns the list of features in the given collection.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // limit - the optional limit parameter limits the number of features that are presented in the response
        // document.
        // Only features that are on the first level of the collection in the response document are counted. Nested
        // objects contained within the explicitly requested features shall not be counted.
        // * Minimum = 1 * Maximum = 50 * Default = 10
        // bbox - only features that have a geometry that intersects the supplied bounding box are selected.
        // * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner,
        // coordinate axis 1 * Upper right corner, coordinate axis 2
        // The coordinate reference system of the values is WGS84 longitude/latitude
        // (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified
        // in the parameter `bbox-crs`.
        // For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum
        // latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the
        // first value (west-most box edge) is larger than the third value (east-most box edge).
        // filter - filter expression to search for features with specific property values in a given collection. Only
        // feature properties of scalar type and equals operator are supported.
        // This is a special parameter where the parameter name is a case sensitive property name. The scheme for this
        // parameter is {property name}={property value}. Unless "filter" is one of the property names in the
        // collection, "filter" should not be used as a parameter name. To search for features with "name" property
        // value "21N13", use "name=21N13".
        // Multiple filters are supported and should be represented as multiple query parameters. E.g.,
        // <property1>=<value1>&<property2>=<value2> String values are case sensitive.
func (client WFSClient) GetFeatures(ctx context.Context, datasetID string, collectionID string, limit *int32, bbox string, filter string) (result ExtendedGeoJSONFeatureCollection, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetFeatures")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: limit,
         Constraints: []validation.Constraint{	{Target: "limit", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "limit", Name: validation.InclusiveMaximum, Rule: int64(50), Chain: nil },
        	{Target: "limit", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError("creator.WFSClient", "GetFeatures", err.Error())
        }

        req, err := client.GetFeaturesPreparer(ctx, datasetID, collectionID, limit, bbox, filter)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeatures", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetFeaturesSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeatures", resp, "Failure sending request")
        return
        }

        result, err = client.GetFeaturesResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetFeatures", resp, "Failure responding to request")
        return
        }

    return
}

    // GetFeaturesPreparer prepares the GetFeatures request.
    func (client WFSClient) GetFeaturesPreparer(ctx context.Context, datasetID string, collectionID string, limit *int32, bbox string, filter string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if limit != nil {
        queryParameters["limit"] = autorest.Encode("query",*limit)
        }
        if len(bbox) > 0 {
        queryParameters["bbox"] = autorest.Encode("query",bbox)
        }
        if len(filter) > 0 {
        queryParameters["filter"] = autorest.Encode("query",filter)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/collections/{collectionId}/items",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetFeaturesSender sends the GetFeatures request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetFeaturesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetFeaturesResponder handles the response to the GetFeatures request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetFeaturesResponder(resp *http.Response) (result ExtendedGeoJSONFeatureCollection, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetLandingPage **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard
// for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Landing Page API provides links to the API definition, the Conformance statements  and the metadata about
// the feature data in this dataset.
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client WFSClient) GetLandingPage(ctx context.Context, datasetID string) (result LandingPageResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetLandingPage")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetLandingPagePreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetLandingPage", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetLandingPageSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetLandingPage", resp, "Failure sending request")
        return
        }

        result, err = client.GetLandingPageResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.WFSClient", "GetLandingPage", resp, "Failure responding to request")
        return
        }

    return
}

    // GetLandingPagePreparer prepares the GetLandingPage request.
    func (client WFSClient) GetLandingPagePreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/wfs/datasets/{datasetId}/",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetLandingPageSender sends the GetLandingPage request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetLandingPageSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetLandingPageResponder handles the response to the GetLandingPage request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetLandingPageResponder(resp *http.Response) (result LandingPageResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

