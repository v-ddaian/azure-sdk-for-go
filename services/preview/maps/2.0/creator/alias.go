package creator

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// AliasClient is the client for the Alias methods of the Creator service.
type AliasClient struct {
    BaseClient
}
// NewAliasClient creates an instance of the AliasClient client.
func NewAliasClient(xMsClientID string) AliasClient {
    return AliasClient{ New(xMsClientID)}
}

// Assign **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to assign an alias to reference a resource.
//
// ### Submit Assign Request
//
// To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the
// `creatorDataItemId` passed as a query parameter.
//
// ### Assign Alias Response
//
// The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was
// assigned successfully. A sample of the assign response is
//
// ```json
// {
// "createdTimestamp": "2020-02-13T21:19:11.123Z",
// "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
// "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
// "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
// }
// ```
    // Parameters:
        // aliasID - the unique id that references an existing alias.
        // creatorDataItemID - the unique id that references a creator data item to be aliased.
func (client AliasClient) Assign(ctx context.Context, aliasID string, creatorDataItemID string) (result AliasListItem, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.Assign")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.AssignPreparer(ctx, aliasID, creatorDataItemID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.AliasClient", "Assign", nil , "Failure preparing request")
    return
    }

        resp, err := client.AssignSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Assign", resp, "Failure sending request")
        return
        }

        result, err = client.AssignResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Assign", resp, "Failure responding to request")
        return
        }

    return
}

    // AssignPreparer prepares the Assign request.
    func (client AliasClient) AssignPreparer(ctx context.Context, aliasID string, creatorDataItemID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "aliasId": autorest.Encode("path",aliasID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "creatorDataItemId": autorest.Encode("query",creatorDataItemID),
    }

    preparer := autorest.CreatePreparer(
autorest.AsPut(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/aliases/{aliasId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AssignSender sends the Assign request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) AssignSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AssignResponder handles the response to the Assign request. The method always
    // closes the http.Response Body.
    func (client AliasClient) AssignResponder(resp *http.Response) (result AliasListItem, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Create **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to create an alias. You can also assign the alias during the create request. An alias can
// reference an ID generated by a creator service, but cannot reference another alias ID.
//
// ### Submit Create Request
//
// To create your alias, you will use a `POST` request. If you would like to assign the alias during the creation, you
// will pass the `resourceId` query parameter.
//
// ### Create Alias Response
//
// The Create API returns a HTTP `201 Created` response with the alias resource in the body.
//
// A sample response from creating an alias:
//
// ```json
// {
// "createdTimestamp": "2020-02-13T21:19:11.123Z",
// "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
// "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
// "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
// }
// ```
    // Parameters:
        // creatorDataItemID - the unique id that references a creator data item to be aliased.
func (client AliasClient) Create(ctx context.Context, creatorDataItemID string) (result AliasesCreateResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.Create")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreparer(ctx, creatorDataItemID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.AliasClient", "Create", nil , "Failure preparing request")
    return
    }

        resp, err := client.CreateSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Create", resp, "Failure sending request")
        return
        }

        result, err = client.CreateResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Create", resp, "Failure responding to request")
        return
        }

    return
}

    // CreatePreparer prepares the Create request.
    func (client AliasClient) CreatePreparer(ctx context.Context, creatorDataItemID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(creatorDataItemID) > 0 {
        queryParameters["creatorDataItemId"] = autorest.Encode("query",creatorDataItemID)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/aliases"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateSender sends the Create request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) CreateSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CreateResponder handles the response to the Create request. The method always
    // closes the http.Response Body.
    func (client AliasClient) CreateResponder(resp *http.Response) (result AliasesCreateResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// Delete **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to delete a previously created alias. You can also use this API to delete old/unused
// aliases to create space for new content.This API does not delete the references resource, only the alias referencing
// the resource.
//
// ### Submit Delete Request
//
// To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias to
// delete.
//
// ### Delete Alias Response
//
// The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted successfully.
    // Parameters:
        // aliasID - the unique id that references an existing alias.
func (client AliasClient) Delete(ctx context.Context, aliasID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.Delete")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreparer(ctx, aliasID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.AliasClient", "Delete", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Delete", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "Delete", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreparer prepares the Delete request.
    func (client AliasClient) DeletePreparer(ctx context.Context, aliasID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "aliasId": autorest.Encode("path",aliasID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/aliases/{aliasId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteSender sends the Delete request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) DeleteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteResponder handles the response to the Delete request. The method always
    // closes the http.Response Body.
    func (client AliasClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetDetails **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch the details of a previously created alias.
//
// ### Submit Get Details Request
//
// To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
//
// ### Get Details Response
//
// The Get Details API returns the previously created alias in `json` format. The response contains the following
// details for the alias resource:
// > createdTimestamp - The timestamp that the alias was created.
// > aliasId - The id for the alias.
// > creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has
// not been assigned).
// > lastUpdatedTimestamp - The last time the alias was assigned to a resource.
//
// Here's a sample response:
// ```json
// {
// "createdTimestamp": "2020-02-13T21:19:11.123Z",
// "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
// "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
// "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
// }
// ```
    // Parameters:
        // aliasID - the unique id that references an existing alias.
func (client AliasClient) GetDetails(ctx context.Context, aliasID string) (result AliasListItem, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.GetDetails")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetDetailsPreparer(ctx, aliasID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.AliasClient", "GetDetails", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetDetailsSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "GetDetails", resp, "Failure sending request")
        return
        }

        result, err = client.GetDetailsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "GetDetails", resp, "Failure responding to request")
        return
        }

    return
}

    // GetDetailsPreparer prepares the GetDetails request.
    func (client AliasClient) GetDetailsPreparer(ctx context.Context, aliasID string) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

        pathParameters := map[string]interface{} {
        "aliasId": autorest.Encode("path",aliasID),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPathParameters("/aliases/{aliasId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetDetailsSender sends the GetDetails request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) GetDetailsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetDetailsResponder handles the response to the GetDetails request. The method always
    // closes the http.Response Body.
    func (client AliasClient) GetDetailsResponder(resp *http.Response) (result AliasListItem, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// List **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools
// that apply to Azure Maps Creator.
//
// This API allows the caller to fetch a list of all previously successfully created aliases.
//
// ### Submit List Request
//
// To list all your aliases, you will issue a `GET` request with no additional parameters.
//
// ### List Data Response
//
// The List API returns the complete list of all aliases in `json` format. The response contains the following details
// for each alias resource:
// > createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
// > aliasId - The id for the alias.
// > creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has
// not been assigned).
// > lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
//
// A sample response returning 2 alias resources:
//
// ```json
// {
// "aliases": [
// {
// "createdTimestamp": "2020-02-13T21:19:11.123Z",
// "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
// "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
// "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
// },
// {
// "createdTimestamp": "2020-02-18T19:53:33.123Z",
// "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6",
// "creatorDataItemId": null,
// "lastUpdatedTimestamp": "2020-02-18T19:53:33.123Z"
// }
// ]
// }
// ```
func (client AliasClient) List(ctx context.Context) (result AliasListResponsePage, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.List")
        defer func() {
            sc := -1
        if result.alr.Response.Response != nil {
        sc = result.alr.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        result.fn = client.listNextResults
    req, err := client.ListPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "creator.AliasClient", "List", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListSender(req)
        if err != nil {
        result.alr.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "List", resp, "Failure sending request")
        return
        }

        result.alr, err = client.ListResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "creator.AliasClient", "List", resp, "Failure responding to request")
        return
        }
            if result.alr.hasNextLink() && result.alr.IsEmpty() {
            err = result.NextWithContext(ctx)
            return
            }

    return
}

    // ListPreparer prepares the List request.
    func (client AliasClient) ListPreparer(ctx context.Context) (*http.Request, error) {
        urlParameters := map[string]interface{} {
        "geography": autorest.Encode("path",client.Geography),
        }

            const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithCustomBaseURL("https://{geography}.atlas.microsoft.com", urlParameters),
autorest.WithPath("/aliases"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListSender sends the List request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) ListSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListResponder handles the response to the List request. The method always
    // closes the http.Response Body.
    func (client AliasClient) ListResponder(resp *http.Response) (result AliasListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

            // listNextResults retrieves the next set of results, if any.
            func (client AliasClient) listNextResults(ctx context.Context, lastResults AliasListResponse) (result AliasListResponse, err error) {
            req, err := lastResults.aliasListResponsePreparer(ctx)
            if err != nil {
            return result, autorest.NewErrorWithError(err, "creator.AliasClient", "listNextResults", nil , "Failure preparing next results request")
            }
            if req == nil {
            return
            }
            resp, err := client.ListSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            return result, autorest.NewErrorWithError(err, "creator.AliasClient", "listNextResults", resp, "Failure sending next results request")
            }
            result, err = client.ListResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, "creator.AliasClient", "listNextResults", resp, "Failure responding to next results request")
            }
            return
                    }

            // ListComplete enumerates all values, automatically crossing page boundaries as required.
            func (client AliasClient) ListComplete(ctx context.Context) (result AliasListResponseIterator, err error) {
            if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.List")
            defer func() {
            sc := -1
            if result.Response().Response.Response != nil {
            sc = result.page.Response().Response.Response.StatusCode
            }
            tracing.EndSpan(ctx, sc, err)
            }()
            }
                    result.page, err = client.List(ctx)
                            return
            }

