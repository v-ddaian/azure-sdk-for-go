package maps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// FeatureStateClient is the client for the FeatureState methods of the Maps service.
type FeatureStateClient struct {
    BaseClient
}
// NewFeatureStateClient creates an instance of the FeatureStateClient client.
func NewFeatureStateClient(subscriptionKey string, xMsClientID string) FeatureStateClient {
    return NewFeatureStateClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewFeatureStateClientWithBaseURI creates an instance of the FeatureStateClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewFeatureStateClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) FeatureStateClient {
        return FeatureStateClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// CreateStatesetPreview **Applies to:** S1 pricing tier.
// <br>
//
// This POST API allows the user to create a new Stateset and define stateset style using request body.
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Feature State API is part of Creator.
//
// The Feature State service allows the user to update the states of a feature and query them to be used in other
// services. The dynamic properties of a feature that don't belong to the dataset are referred to as *states* here.
//
// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for
// feature states for a dataset.
//
// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current
// feature states. A feature can have only one state at a given point in time.
//
// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure
// Maps, the state value gets updated only if the provided stateâ€™s timestamp is later than the stored timestamp.
//
// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State
// Tile documentation for more information.
    // Parameters:
        // datasetID - the datasetId must have been obtained from a successful [Dataset Create
        // API](https://review.docs.microsoft.com/en-us/rest-staging/api/maps-master/dataset/createpreview?branch=lbs)
        // call.
        // statesetCreateRequestBody - the stateset style JSON data.
func (client FeatureStateClient) CreateStatesetPreview(ctx context.Context, datasetID string, statesetCreateRequestBody StylesObject) (result StatesetCreatedResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.CreateStatesetPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreateStatesetPreviewPreparer(ctx, datasetID, statesetCreateRequestBody)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "CreateStatesetPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.CreateStatesetPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "CreateStatesetPreview", resp, "Failure sending request")
        return
        }

        result, err = client.CreateStatesetPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "CreateStatesetPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // CreateStatesetPreviewPreparer prepares the CreateStatesetPreview request.
    func (client FeatureStateClient) CreateStatesetPreviewPreparer(ctx context.Context, datasetID string, statesetCreateRequestBody StylesObject) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "datasetId": autorest.Encode("query",datasetID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/featureState/stateset"),
autorest.WithJSON(statesetCreateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateStatesetPreviewSender sends the CreateStatesetPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) CreateStatesetPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CreateStatesetPreviewResponder handles the response to the CreateStatesetPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) CreateStatesetPreviewResponder(resp *http.Response) (result StatesetCreatedResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeleteStatePreview **Applies to:** S1 pricing tier. <br> This API deletes the state information identified by the
// StateKeyName parameter for the feature identified by the FeatureId parameter in the the stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given stateset. If no state was set for the featureId in the stateset
        // earlier, Bad Request response will be returned.
        // stateKeyName - the Name of the state to be deleted.
func (client FeatureStateClient) DeleteStatePreview(ctx context.Context, statesetID string, featureID string, stateKeyName string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.DeleteStatePreview")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteStatePreviewPreparer(ctx, statesetID, featureID, stateKeyName)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteStatePreviewSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteStatePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteStatePreviewPreparer prepares the DeleteStatePreview request.
    func (client FeatureStateClient) DeleteStatePreviewPreparer(ctx context.Context, statesetID string, featureID string, stateKeyName string) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "featureId": autorest.Encode("query",featureID),
    "stateKeyName": autorest.Encode("query",stateKeyName),
    "statesetId": autorest.Encode("query",statesetID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/featureState/state"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteStatePreviewSender sends the DeleteStatePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) DeleteStatePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteStatePreviewResponder handles the response to the DeleteStatePreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) DeleteStatePreviewResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// DeleteStatesetPreview **Applies to:** S1 pricing tier. <br> This DELETE API allows the user to delete the stateset
// and the associated data.
    // Parameters:
        // statesetID - the stateset id that was created.
func (client FeatureStateClient) DeleteStatesetPreview(ctx context.Context, statesetID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.DeleteStatesetPreview")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteStatesetPreviewPreparer(ctx, statesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatesetPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteStatesetPreviewSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatesetPreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteStatesetPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "DeleteStatesetPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteStatesetPreviewPreparer prepares the DeleteStatesetPreview request.
    func (client FeatureStateClient) DeleteStatesetPreviewPreparer(ctx context.Context, statesetID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/featureState/stateset/{statesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteStatesetPreviewSender sends the DeleteStatesetPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) DeleteStatesetPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteStatesetPreviewResponder handles the response to the DeleteStatesetPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) DeleteStatesetPreviewResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetStatesetPreview **Applies to:** S1 pricing tier.
// <br>
//
// This GET API allows the user to get the stateset Information.
//
// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
func (client FeatureStateClient) GetStatesetPreview(ctx context.Context, statesetID string) (result StatesetGetResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.GetStatesetPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetStatesetPreviewPreparer(ctx, statesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesetPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetStatesetPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesetPreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetStatesetPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesetPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetStatesetPreviewPreparer prepares the GetStatesetPreview request.
    func (client FeatureStateClient) GetStatesetPreviewPreparer(ctx context.Context, statesetID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/featureState/stateset/{statesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetStatesetPreviewSender sends the GetStatesetPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) GetStatesetPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetStatesetPreviewResponder handles the response to the GetStatesetPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) GetStatesetPreviewResponder(resp *http.Response) (result StatesetGetResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetStatesPreview **Applies to:** S1 pricing tier. <br> This API returns the current state information associated
// with the given feature in the given stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given stateset. If no state was set for the featureId in the stateset
        // earlier, Bad Request response will be returned.
func (client FeatureStateClient) GetStatesPreview(ctx context.Context, statesetID string, featureID string) (result FeatureStatesStructure, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.GetStatesPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetStatesPreviewPreparer(ctx, statesetID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetStatesPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesPreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetStatesPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "GetStatesPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetStatesPreviewPreparer prepares the GetStatesPreview request.
    func (client FeatureStateClient) GetStatesPreviewPreparer(ctx context.Context, statesetID string, featureID string) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "featureId": autorest.Encode("query",featureID),
    "statesetId": autorest.Encode("query",statesetID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/featureState/state"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetStatesPreviewSender sends the GetStatesPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) GetStatesPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetStatesPreviewResponder handles the response to the GetStatesPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) GetStatesPreviewResponder(resp *http.Response) (result FeatureStatesStructure, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListStatesetPreview **Applies to:** S1 pricing tier. <br> This API allows the caller to fetch a list of all
// previously successfully created statesets.
func (client FeatureStateClient) ListStatesetPreview(ctx context.Context) (result StatesetListResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.ListStatesetPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ListStatesetPreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "ListStatesetPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListStatesetPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "ListStatesetPreview", resp, "Failure sending request")
        return
        }

        result, err = client.ListStatesetPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "ListStatesetPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // ListStatesetPreviewPreparer prepares the ListStatesetPreview request.
    func (client FeatureStateClient) ListStatesetPreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/featureState/stateset"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListStatesetPreviewSender sends the ListStatesetPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) ListStatesetPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListStatesetPreviewResponder handles the response to the ListStatesetPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) ListStatesetPreviewResponder(resp *http.Response) (result StatesetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// PutStatesetPreview **Applies to:** S1 pricing tier.
// <br>
//
// This PUT API allows the user to update the stateset style rules.
    // Parameters:
        // statesetID - the stateset id that was created.
        // statesetStyleUpdateRequestBody - the stateset style JSON data. Only style rules are allowed to be updated,
        // update on keyname and type is not allowed.
func (client FeatureStateClient) PutStatesetPreview(ctx context.Context, statesetID string, statesetStyleUpdateRequestBody StylesObject) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.PutStatesetPreview")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.PutStatesetPreviewPreparer(ctx, statesetID, statesetStyleUpdateRequestBody)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "PutStatesetPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.PutStatesetPreviewSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "PutStatesetPreview", resp, "Failure sending request")
        return
        }

        result, err = client.PutStatesetPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "PutStatesetPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // PutStatesetPreviewPreparer prepares the PutStatesetPreview request.
    func (client FeatureStateClient) PutStatesetPreviewPreparer(ctx context.Context, statesetID string, statesetStyleUpdateRequestBody StylesObject) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "statesetId": autorest.Encode("path",statesetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPut(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/featureState/stateset/{statesetId}",pathParameters),
autorest.WithJSON(statesetStyleUpdateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // PutStatesetPreviewSender sends the PutStatesetPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) PutStatesetPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // PutStatesetPreviewResponder handles the response to the PutStatesetPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) PutStatesetPreviewResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// UpdateStatesPreview **Applies to:** S1 pricing tier. <br>
// This POST API allows the user to update the state of the given feature in the given stateset.
    // Parameters:
        // statesetID - the stateset id that was created.
        // featureID - the id of a feature in the given dataset. If the featureId is not present in the dataset, Bad
        // Request response will be returned.
        // featureStateUpdateRequestBody - the feature state JSON data. A feature can have only one state at a given
        // point in time. The specified state keyname must have been defined during the stateset creation.
func (client FeatureStateClient) UpdateStatesPreview(ctx context.Context, statesetID string, featureID string, featureStateUpdateRequestBody FeatureStatesStructure) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/FeatureStateClient.UpdateStatesPreview")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.UpdateStatesPreviewPreparer(ctx, statesetID, featureID, featureStateUpdateRequestBody)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "UpdateStatesPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.UpdateStatesPreviewSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "UpdateStatesPreview", resp, "Failure sending request")
        return
        }

        result, err = client.UpdateStatesPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.FeatureStateClient", "UpdateStatesPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // UpdateStatesPreviewPreparer prepares the UpdateStatesPreview request.
    func (client FeatureStateClient) UpdateStatesPreviewPreparer(ctx context.Context, statesetID string, featureID string, featureStateUpdateRequestBody FeatureStatesStructure) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "featureId": autorest.Encode("query",featureID),
    "statesetId": autorest.Encode("query",statesetID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsContentType("application/json; charset=utf-8"),
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/featureState/state"),
autorest.WithJSON(featureStateUpdateRequestBody),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateStatesPreviewSender sends the UpdateStatesPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client FeatureStateClient) UpdateStatesPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // UpdateStatesPreviewResponder handles the response to the UpdateStatesPreview request. The method always
    // closes the http.Response Body.
    func (client FeatureStateClient) UpdateStatesPreviewResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
            result.Response = resp
            return
    }

