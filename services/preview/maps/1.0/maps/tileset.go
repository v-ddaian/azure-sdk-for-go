package maps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// TilesetClient is the client for the Tileset methods of the Maps service.
type TilesetClient struct {
    BaseClient
}
// NewTilesetClient creates an instance of the TilesetClient client.
func NewTilesetClient(subscriptionKey string, xMsClientID string) TilesetClient {
    return NewTilesetClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewTilesetClientWithBaseURI creates an instance of the TilesetClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewTilesetClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) TilesetClient {
        return TilesetClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// CreatePreview **Tileset Create API**
//
// **Applies to**: S1 pricing tier.
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
// and SDK. The Tileset API is part of Creator.
//
// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that
// can be consumed
// from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a dataset, use the
// [DataSet Create API](/rest/api/maps/dataset/createpreview).
//
// ## Submit Create Request
//
// To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will be
// used as the source of the tileset data.
//
// The Create Tileset API is a
// [long-running request](https://aka.ms/am-creator-lrt).
    // Parameters:
        // datasetID - the unique `datasetId` that the tileset create API uses to retrieve features to generate tiles.
        // The `datasetId` must have been obtained from a successful [Dataset Create
        // API](/en-us/rest/api/maps/dataset/createpreview) call.
        // description - user provided description of the tileset.
func (client TilesetClient) CreatePreview(ctx context.Context, datasetID string, description string) (result TilesetCreatePreviewFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.CreatePreview")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreviewPreparer(ctx, datasetID, description)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.TilesetClient", "CreatePreview", nil , "Failure preparing request")
    return
    }

        result, err = client.CreatePreviewSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.TilesetClient", "CreatePreview", nil , "Failure sending request")
        return
        }

    return
}

    // CreatePreviewPreparer prepares the CreatePreview request.
    func (client TilesetClient) CreatePreviewPreparer(ctx context.Context, datasetID string, description string) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "datasetId": autorest.Encode("query",datasetID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(description) > 0 {
        queryParameters["description"] = autorest.Encode("query",description)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/tileset/create/vector"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreatePreviewSender sends the CreatePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) CreatePreviewSender(req *http.Request) (future TilesetCreatePreviewFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // CreatePreviewResponder handles the response to the CreatePreview request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) CreatePreviewResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeletePreview **Tileset Delete API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Tileset API is part of Creator.
// This API allows the caller to delete a created tileset.<br>
// You can use this API if a tileset is no longer needed.
//
// ### Submit Delete Request
//
// To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the tileset
// to delete.<br>
//
// #### Delete request "Successful"
//
// The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted
// successfully.<br>
//
// #### Delete request "Failed"
//
// A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not found.
//
// Here is a sample error response:
//
// <br>
//
// ```json
// {
// "error": {
// "code": "400 BadRequest",
// "message": "Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist."
// }
// }
// ```
    // Parameters:
        // tilesetID - the Tileset Id
func (client TilesetClient) DeletePreview(ctx context.Context, tilesetID string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.DeletePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreviewPreparer(ctx, tilesetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.TilesetClient", "DeletePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeletePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.TilesetClient", "DeletePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeletePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.TilesetClient", "DeletePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreviewPreparer prepares the DeletePreview request.
    func (client TilesetClient) DeletePreviewPreparer(ctx context.Context, tilesetID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "tilesetId": autorest.Encode("path",tilesetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/tileset/{tilesetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeletePreviewSender sends the DeletePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) DeletePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeletePreviewResponder handles the response to the DeletePreview request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) DeletePreviewResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListPreview **Tileset List API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Tileset API is part of Creator.
// This API allows the caller to fetch a list of all tilesets created.
// <br>
func (client TilesetClient) ListPreview(ctx context.Context) (result TilesetListResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TilesetClient.ListPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ListPreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.TilesetClient", "ListPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.TilesetClient", "ListPreview", resp, "Failure sending request")
        return
        }

        result, err = client.ListPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.TilesetClient", "ListPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // ListPreviewPreparer prepares the ListPreview request.
    func (client TilesetClient) ListPreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/tileset"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListPreviewSender sends the ListPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client TilesetClient) ListPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListPreviewResponder handles the response to the ListPreview request. The method always
    // closes the http.Response Body.
    func (client TilesetClient) ListPreviewResponder(resp *http.Response) (result TilesetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

