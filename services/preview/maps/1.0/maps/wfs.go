package maps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
    "github.com/Azure/go-autorest/autorest/validation"
)

// WFSClient is the client for the WFS methods of the Maps service.
type WFSClient struct {
    BaseClient
}
// NewWFSClient creates an instance of the WFSClient client.
func NewWFSClient(subscriptionKey string, xMsClientID string) WFSClient {
    return NewWFSClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewWFSClientWithBaseURI creates an instance of the WFSClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewWFSClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) WFSClient {
        return WFSClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// CollectionDefinitionPreview creator makes it possible to develop applications based on your private indoor  map data
// using Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open
// Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
//
// The Collection Definition API provides the detailed data model of a given collection.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
func (client WFSClient) CollectionDefinitionPreview(ctx context.Context, datasetid string, collectionID string) (result CollectionDefinition, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.CollectionDefinitionPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CollectionDefinitionPreviewPreparer(ctx, datasetid, collectionID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDefinitionPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.CollectionDefinitionPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDefinitionPreview", resp, "Failure sending request")
        return
        }

        result, err = client.CollectionDefinitionPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDefinitionPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // CollectionDefinitionPreviewPreparer prepares the CollectionDefinitionPreview request.
    func (client WFSClient) CollectionDefinitionPreviewPreparer(ctx context.Context, datasetid string, collectionID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections/{collectionId}/definition",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CollectionDefinitionPreviewSender sends the CollectionDefinitionPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) CollectionDefinitionPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CollectionDefinitionPreviewResponder handles the response to the CollectionDefinitionPreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) CollectionDefinitionPreviewResponder(resp *http.Response) (result CollectionDefinition, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// CollectionDescriptionPreview creator makes it possible to develop applications based on your private indoor  map
// data using Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open
// Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
//
// The Collection Description API provides the description of a given collection. It includes the links to the
// operations that can be performed on the collection.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
func (client WFSClient) CollectionDescriptionPreview(ctx context.Context, datasetid string, collectionID string) (result CollectionInfo, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.CollectionDescriptionPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CollectionDescriptionPreviewPreparer(ctx, datasetid, collectionID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDescriptionPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.CollectionDescriptionPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDescriptionPreview", resp, "Failure sending request")
        return
        }

        result, err = client.CollectionDescriptionPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionDescriptionPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // CollectionDescriptionPreviewPreparer prepares the CollectionDescriptionPreview request.
    func (client WFSClient) CollectionDescriptionPreviewPreparer(ctx context.Context, datasetid string, collectionID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections/{collectionId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CollectionDescriptionPreviewSender sends the CollectionDescriptionPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) CollectionDescriptionPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CollectionDescriptionPreviewResponder handles the response to the CollectionDescriptionPreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) CollectionDescriptionPreviewResponder(resp *http.Response) (result CollectionInfo, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// CollectionsDescriptionPreview creator makes it possible to develop applications based on your private indoor  map
// data using Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open
// Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Collections Description API provides descriptions of all the collections in a given dataset.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
func (client WFSClient) CollectionsDescriptionPreview(ctx context.Context, datasetid string) (result Content, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.CollectionsDescriptionPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CollectionsDescriptionPreviewPreparer(ctx, datasetid)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionsDescriptionPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.CollectionsDescriptionPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionsDescriptionPreview", resp, "Failure sending request")
        return
        }

        result, err = client.CollectionsDescriptionPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "CollectionsDescriptionPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // CollectionsDescriptionPreviewPreparer prepares the CollectionsDescriptionPreview request.
    func (client WFSClient) CollectionsDescriptionPreviewPreparer(ctx context.Context, datasetid string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CollectionsDescriptionPreviewSender sends the CollectionsDescriptionPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) CollectionsDescriptionPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CollectionsDescriptionPreviewResponder handles the response to the CollectionsDescriptionPreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) CollectionsDescriptionPreviewResponder(resp *http.Response) (result Content, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeleteFeaturePreview creator makes it possible to develop applications based on your private indoor  map data using
// Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial
// Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Delete Feature API deletes the feature identified by the provided id in the given collection. At this point this
// API supports only facility features. Deleting a facility feature deletes all the child features of that facility
// recursively.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // featureID - local identifier of a specific feature
func (client WFSClient) DeleteFeaturePreview(ctx context.Context, datasetid string, collectionID string, featureID string) (result autorest.Response, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.DeleteFeaturePreview")
        defer func() {
            sc := -1
        if result.Response != nil {
        sc = result.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeleteFeaturePreviewPreparer(ctx, datasetid, collectionID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "DeleteFeaturePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeleteFeaturePreviewSender(req)
        if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "DeleteFeaturePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeleteFeaturePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "DeleteFeaturePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeleteFeaturePreviewPreparer prepares the DeleteFeaturePreview request.
    func (client WFSClient) DeleteFeaturePreviewPreparer(ctx context.Context, datasetid string, collectionID string, featureID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetid": autorest.Encode("path",datasetid),
        "featureId": autorest.Encode("path",featureID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections/{collectionId}/items/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeleteFeaturePreviewSender sends the DeleteFeaturePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) DeleteFeaturePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeleteFeaturePreviewResponder handles the response to the DeleteFeaturePreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) DeleteFeaturePreviewResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByClosing())
            result.Response = resp
            return
    }

// GetFeaturePreview creator makes it possible to develop applications based on your private indoor  map data using
// Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial
// Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Feature API returns the feature identified by the provided id in the given collection.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // featureID - local identifier of a specific feature
func (client WFSClient) GetFeaturePreview(ctx context.Context, datasetid string, collectionID string, featureID string) (result Feature, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetFeaturePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetFeaturePreviewPreparer(ctx, datasetid, collectionID, featureID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetFeaturePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturePreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetFeaturePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetFeaturePreviewPreparer prepares the GetFeaturePreview request.
    func (client WFSClient) GetFeaturePreviewPreparer(ctx context.Context, datasetid string, collectionID string, featureID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetid": autorest.Encode("path",datasetid),
        "featureId": autorest.Encode("path",featureID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections/{collectionId}/items/{featureId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetFeaturePreviewSender sends the GetFeaturePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetFeaturePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetFeaturePreviewResponder handles the response to the GetFeaturePreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetFeaturePreviewResponder(resp *http.Response) (result Feature, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetFeaturesPreview creator makes it possible to develop applications based on your private indoor  map data using
// Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial
// Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Features API returns the list of features in the given collection.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
        // collectionID - identifier (name) of a specific collection
        // limit - the optional limit parameter limits the number of features that are presented in the response
        // document.
        // Only features that are on the first level of the collection in the response document are counted. Nested
        // objects contained within the explicitly requested features shall not be counted.
        // * Minimum = 1 * Maximum = 50 * Default = 10
        // bbox - only features that have a geometry that intersects the supplied bounding box are selected.
        // * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner,
        // coordinate axis 1 * Upper right corner, coordinate axis 2
        // The coordinate reference system of the values is WGS84 longitude/latitude
        // (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified
        // in the parameter `bbox-crs`.
        // For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum
        // latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the
        // first value (west-most box edge) is larger than the third value (east-most box edge).
        // filter - filter expression to search for features with specific property values in a given collection. Only
        // feature properties of scalar type and equals operator are supported.
        // This is a special parameter where the parameter name is the property name. The scheme for this parameter is
        // {property name}={property value}. Unless "filter" is one of the property names in the collection, "filter"
        // should not be used as a parameter name. To search for features with "name" property value "21N13", use
        // "name=21N13".
        // Multiple filters are supported and should be represented as multiple query parameters. E.g.,
        // <property1>=<value1>&<property2>=<value2> String values are case sensitive.
func (client WFSClient) GetFeaturesPreview(ctx context.Context, datasetid string, collectionID string, limit *float64, bbox string, filter string) (result FeatureCollectionGeoJSON, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetFeaturesPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
        if err := validation.Validate([]validation.Validation{
        { TargetValue: limit,
         Constraints: []validation.Constraint{	{Target: "limit", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "limit", Name: validation.InclusiveMaximum, Rule: float64(50), Chain: nil },
        	{Target: "limit", Name: validation.InclusiveMinimum, Rule: float64(1), Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError("maps.WFSClient", "GetFeaturesPreview", err.Error())
        }

        req, err := client.GetFeaturesPreviewPreparer(ctx, datasetid, collectionID, limit, bbox, filter)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturesPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetFeaturesPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturesPreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetFeaturesPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetFeaturesPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetFeaturesPreviewPreparer prepares the GetFeaturesPreview request.
    func (client WFSClient) GetFeaturesPreviewPreparer(ctx context.Context, datasetid string, collectionID string, limit *float64, bbox string, filter string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "collectionId": autorest.Encode("path",collectionID),
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if limit != nil {
        queryParameters["limit"] = autorest.Encode("query",*limit)
            } else {
            queryParameters["limit"] = autorest.Encode("query",10)
        }
        if len(bbox) > 0 {
        queryParameters["bbox"] = autorest.Encode("query",bbox)
        }
        if len(filter) > 0 {
        queryParameters["filter"] = autorest.Encode("query",filter)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/collections/{collectionId}/items",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetFeaturesPreviewSender sends the GetFeaturesPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetFeaturesPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetFeaturesPreviewResponder handles the response to the GetFeaturesPreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetFeaturesPreviewResponder(resp *http.Response) (result FeatureCollectionGeoJSON, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetLandingPagePreview creator makes it possible to develop applications based on your private indoor  map data using
// Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial
// Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Landing Page API provides links to the API definition, the Conformance statements  and the metadata about
// the feature data in this dataset.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
func (client WFSClient) GetLandingPagePreview(ctx context.Context, datasetid string) (result Root, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetLandingPagePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetLandingPagePreviewPreparer(ctx, datasetid)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetLandingPagePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetLandingPagePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetLandingPagePreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetLandingPagePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetLandingPagePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetLandingPagePreviewPreparer prepares the GetLandingPagePreview request.
    func (client WFSClient) GetLandingPagePreviewPreparer(ctx context.Context, datasetid string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetLandingPagePreviewSender sends the GetLandingPagePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetLandingPagePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetLandingPagePreviewResponder handles the response to the GetLandingPagePreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetLandingPagePreviewResponder(resp *http.Response) (result Root, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetRequirementsClassesPreview creator makes it possible to develop applications based on your private indoor  map
// data using Azure Maps API and SDK. The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open
// Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query
// [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar
// type, based on a common schema.
// The Get Requirements Classes lists all requirements classes specified in the standard that the server conforms to.
    // Parameters:
        // datasetid - the identifier for the dataset to query from.
func (client WFSClient) GetRequirementsClassesPreview(ctx context.Context, datasetid string) (result ReqClasses, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WFSClient.GetRequirementsClassesPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetRequirementsClassesPreviewPreparer(ctx, datasetid)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetRequirementsClassesPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetRequirementsClassesPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetRequirementsClassesPreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetRequirementsClassesPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WFSClient", "GetRequirementsClassesPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetRequirementsClassesPreviewPreparer prepares the GetRequirementsClassesPreview request.
    func (client WFSClient) GetRequirementsClassesPreviewPreparer(ctx context.Context, datasetid string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "datasetid": autorest.Encode("path",datasetid),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/wfs/datasets/{datasetid}/conformance",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetRequirementsClassesPreviewSender sends the GetRequirementsClassesPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client WFSClient) GetRequirementsClassesPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetRequirementsClassesPreviewResponder handles the response to the GetRequirementsClassesPreview request. The method always
    // closes the http.Response Body.
    func (client WFSClient) GetRequirementsClassesPreviewResponder(resp *http.Response) (result ReqClasses, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

