package maps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// GeolocationClient is the client for the Geolocation methods of the Maps service.
type GeolocationClient struct {
    BaseClient
}
// NewGeolocationClient creates an instance of the GeolocationClient client.
func NewGeolocationClient(subscriptionKey string, xMsClientID string) GeolocationClient {
    return NewGeolocationClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewGeolocationClientWithBaseURI creates an instance of the GeolocationClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewGeolocationClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) GeolocationClient {
        return GeolocationClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// GetIPToLocationPreview **Applies to**: S0 and S1 pricing tiers.
//
//
// This service will return the ISO country code for the provided IP address. Developers can use this information  to
// block or alter certain content based on geographical locations where the application is being viewed from.
//
//
// __Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft
// Corporation.
    // Parameters:
        // IP - the IP address. Both IPv4 and IPv6 are allowed.
func (client GeolocationClient) GetIPToLocationPreview(ctx context.Context, IP string) (result IPAddressToLocationResult, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/GeolocationClient.GetIPToLocationPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetIPToLocationPreviewPreparer(ctx, IP)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.GeolocationClient", "GetIPToLocationPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetIPToLocationPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.GeolocationClient", "GetIPToLocationPreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetIPToLocationPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.GeolocationClient", "GetIPToLocationPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetIPToLocationPreviewPreparer prepares the GetIPToLocationPreview request.
    func (client GeolocationClient) GetIPToLocationPreviewPreparer(ctx context.Context, IP string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "ip": autorest.Encode("query",IP),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/geolocation/ip/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetIPToLocationPreviewSender sends the GetIPToLocationPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client GeolocationClient) GetIPToLocationPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetIPToLocationPreviewResponder handles the response to the GetIPToLocationPreview request. The method always
    // closes the http.Response Body.
    func (client GeolocationClient) GetIPToLocationPreviewResponder(resp *http.Response) (result IPAddressToLocationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

