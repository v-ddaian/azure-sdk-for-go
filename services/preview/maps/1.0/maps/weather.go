package maps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// WeatherClient is the client for the Weather methods of the Maps service.
type WeatherClient struct {
    BaseClient
}
// NewWeatherClient creates an instance of the WeatherClient client.
func NewWeatherClient(subscriptionKey string, xMsClientID string) WeatherClient {
    return NewWeatherClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewWeatherClientWithBaseURI creates an instance of the WeatherClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewWeatherClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) WeatherClient {
        return WeatherClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// GetCurrentConditions **Get Current Conditions**
//
//
// **Applies to**: S0 and S1 pricing tiers.
//
//
// Get Current Conditions service returns detailed current weather conditions such as precipitation, temperature and
// wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular location can
// be retrieved. The basic information returned with the response include details such as observation date and time,
// brief description of the weather conditions, weather icon, precipitation indicator flags, and temperature.
// Additional details such as RealFeelâ„¢ Temperature and UV index are also returned.
    // Parameters:
        // query - coordinates of the location for which current conditions information is requested. The applicable
        // query is specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // unit - specifies to return the data in either metric units or imperial units. Default value is metric.
        // details - return full details for the current conditions. Available values are
        // * `true` - Returns full details. By default all details are returned.
        // * `false` - Returns a truncated version of the current condition data, which includes observation date time,
        // weather phrase, icon code, precipitation indicator flag, and temperature.
        // duration - time frame of the returned weather conditions. By default, the most current weather conditions
        // will be returned. Default value is 0. Supported values are:
        // * `0` - Return the most current weather conditions.
        // * `6` - Return weather conditions from past 6 hours.
        // * `24` - Return weather conditions from past 24 hours.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetCurrentConditions(ctx context.Context, query string, unit Unit, details string, duration *int32, language string) (result CurrentConditionsResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetCurrentConditions")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetCurrentConditionsPreparer(ctx, query, unit, details, duration, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetCurrentConditions", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetCurrentConditionsSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetCurrentConditions", resp, "Failure sending request")
        return
        }

        result, err = client.GetCurrentConditionsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetCurrentConditions", resp, "Failure responding to request")
        return
        }

    return
}

    // GetCurrentConditionsPreparer prepares the GetCurrentConditions request.
    func (client WeatherClient) GetCurrentConditionsPreparer(ctx context.Context, query string, unit Unit, details string, duration *int32, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(string(unit)) > 0 {
        queryParameters["unit"] = autorest.Encode("query",unit)
            } else {
            queryParameters["unit"] = autorest.Encode("query","metric")
        }
        if len(details) > 0 {
        queryParameters["details"] = autorest.Encode("query",details)
            } else {
            queryParameters["details"] = autorest.Encode("query","true")
        }
        if duration != nil {
        queryParameters["duration"] = autorest.Encode("query",*duration)
            } else {
            queryParameters["duration"] = autorest.Encode("query",0)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/currentConditions/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCurrentConditionsSender sends the GetCurrentConditions request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetCurrentConditionsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetCurrentConditionsResponder handles the response to the GetCurrentConditions request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetCurrentConditionsResponder(resp *http.Response) (result CurrentConditionsResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetDailyForecast **Get Daily Forecast**
//
//
// **Applies to**: S0 and S1 pricing tiers.
//
//
// The service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15, 25, or
// 45 days for a given coordinate location.  The response include details such as temperature, wind, precipitation, air
// quality, and UV index.
//
// In S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily forecast
// for the next 25 days, and 45 days.
    // Parameters:
        // query - coordinates of the location for which current conditions information is requested. The applicable
        // query is specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // unit - specifies to return the data in either metric units or imperial units. Default value is metric.
        // duration - specifies for how many days the daily forecast responses are returned. Available values are
        // * `1` - Return forecast data for the next day. Returned by default.
        // * `5` - Return forecast data for the next 5 days.
        // * `10` - Return forecast data for the next 10 days.
        // * `25` - Return forecast data for the next 25 days. Only available in S1 SKU.
        // * `45` - Return forecast data for the next 45 days. Only available in S1 SKU.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetDailyForecast(ctx context.Context, query string, unit Unit, duration *int32, language string) (result DailyForecastResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetDailyForecast")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetDailyForecastPreparer(ctx, query, unit, duration, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyForecast", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetDailyForecastSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyForecast", resp, "Failure sending request")
        return
        }

        result, err = client.GetDailyForecastResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyForecast", resp, "Failure responding to request")
        return
        }

    return
}

    // GetDailyForecastPreparer prepares the GetDailyForecast request.
    func (client WeatherClient) GetDailyForecastPreparer(ctx context.Context, query string, unit Unit, duration *int32, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(string(unit)) > 0 {
        queryParameters["unit"] = autorest.Encode("query",unit)
            } else {
            queryParameters["unit"] = autorest.Encode("query","metric")
        }
        if duration != nil {
        queryParameters["duration"] = autorest.Encode("query",*duration)
            } else {
            queryParameters["duration"] = autorest.Encode("query",1)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/forecast/daily/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetDailyForecastSender sends the GetDailyForecast request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetDailyForecastSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetDailyForecastResponder handles the response to the GetDailyForecast request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetDailyForecastResponder(resp *http.Response) (result DailyForecastResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetDailyIndices **Get Daily Indices**
//
// **Applies to**: S0 and S1 pricing tiers.
//
// There may be times when you want to know if the weather conditions are optimal for a specific activity, for example,
// for outdoor construction, indoor activities, running or farming including soil moisture information.  Azure Maps
// Indices API returns index values that will guide end users to plan future activities. For example, a health mobile
// application can notify users that today is good weather for running or for other outdoors activities like for
// playing golf, and retail stores can optimize their digital marketing campaigns based on predicted index values. The
// service returns in daily indices values for current and next 5, 10 and 15 days starting from current day.
    // Parameters:
        // query - coordinates of the location for which daily indices are requested. The applicable query is specified
        // as a comma separated string composed by latitude followed by longitude e.g. "47.641268,-122.125679".
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
        // duration - specifies for how many days the daily indices are returned. By default, the indices data for the
        // current day will be returned. When requesting future indices data, the current day is included in the
        // response as day 1. Available values are
        // * `1` - Return daily index data for the current day. Default value.
        // * `5` - Return 5 days of daily index data starting from the current day.
        // * `10` - Return 10 days of daily index data starting from the current day.
        // * `15` - Return 15 days of daily index data starting from the current day.
        // indexID - numeric index identifier that can be used for restricting returned results to the corresponding
        // index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service
        // Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices.
        // indexGroupID - numeric index group identifier that can be used for restricting returned results to the
        // corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather
        // Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index
        // groups.
func (client WeatherClient) GetDailyIndices(ctx context.Context, query string, language string, duration *int32, indexID *int32, indexGroupID *int32) (result DailyIndicesResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetDailyIndices")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetDailyIndicesPreparer(ctx, query, language, duration, indexID, indexGroupID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyIndices", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetDailyIndicesSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyIndices", resp, "Failure sending request")
        return
        }

        result, err = client.GetDailyIndicesResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetDailyIndices", resp, "Failure responding to request")
        return
        }

    return
}

    // GetDailyIndicesPreparer prepares the GetDailyIndices request.
    func (client WeatherClient) GetDailyIndicesPreparer(ctx context.Context, query string, language string, duration *int32, indexID *int32, indexGroupID *int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }
        if duration != nil {
        queryParameters["duration"] = autorest.Encode("query",*duration)
            } else {
            queryParameters["duration"] = autorest.Encode("query",1)
        }
        if indexID != nil {
        queryParameters["indexId"] = autorest.Encode("query",*indexID)
        }
        if indexGroupID != nil {
        queryParameters["indexGroupId"] = autorest.Encode("query",*indexGroupID)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/indices/daily/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetDailyIndicesSender sends the GetDailyIndices request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetDailyIndicesSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetDailyIndicesResponder handles the response to the GetDailyIndices request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetDailyIndicesResponder(resp *http.Response) (result DailyIndicesResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetHourlyForecast **Get Hourly Forecast**
//
// **Applies to**: S0 and S1 pricing tiers.
//
//
// Request detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and 240
// hours (10 days) for the given the given coordinate location.  The API returns details such as temperature, humidity,
// wind, precipitation, and ultraviolet (UV) index.
//
// In S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you can
// also request hourly forecast for the next 120 (5 days) and 240 hours (10 days).
    // Parameters:
        // query - coordinates of the location for which hourly forecast information is requested. The applicable query
        // is specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // unit - specifies to return the data in either metric units or imperial units. Default value is metric.
        // duration - time frame of the returned weather forecast. By default, the forecast data for next hour will be
        // returned. Available values are
        // * `1` - Return forecast data for the next hour. Default value.
        // * `12` - Return hourly forecast for next 12 hours.
        // * `24` - Return hourly forecast for next 24 hours.
        // * `72` - Return hourly forecast for next 72 hours (3 days).
        // * `120` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.
        // * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetHourlyForecast(ctx context.Context, query string, unit Unit, duration *int32, language string) (result HourlyForecastResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetHourlyForecast")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetHourlyForecastPreparer(ctx, query, unit, duration, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetHourlyForecast", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetHourlyForecastSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetHourlyForecast", resp, "Failure sending request")
        return
        }

        result, err = client.GetHourlyForecastResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetHourlyForecast", resp, "Failure responding to request")
        return
        }

    return
}

    // GetHourlyForecastPreparer prepares the GetHourlyForecast request.
    func (client WeatherClient) GetHourlyForecastPreparer(ctx context.Context, query string, unit Unit, duration *int32, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(string(unit)) > 0 {
        queryParameters["unit"] = autorest.Encode("query",unit)
            } else {
            queryParameters["unit"] = autorest.Encode("query","metric")
        }
        if duration != nil {
        queryParameters["duration"] = autorest.Encode("query",*duration)
            } else {
            queryParameters["duration"] = autorest.Encode("query",1)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/forecast/hourly/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetHourlyForecastSender sends the GetHourlyForecast request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetHourlyForecastSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetHourlyForecastResponder handles the response to the GetHourlyForecast request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetHourlyForecastResponder(resp *http.Response) (result HourlyForecastResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetMinuteForecast **Get Minute Forecast**
//
//
// **Applies to**: S1 pricing tier.
//
//
// Get Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes.  Users
// can request weather forecasts in the interval of 1, 5 and 15 minutes.  The response will include details such as the
// type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation intensity value
// (dBZ).
    // Parameters:
        // query - coordinates of the location for which minute forecast information is requested. The applicable query
        // is specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // interval - specifies time interval in minutes for the returned weather forecast. Supported values are
        // * `1` -  Retrieve forecast for 1-minute intervals. Returned by default.
        // * `5` - Retrieve forecasts for 5-minute intervals.
        // * `15` - Retrieve forecasts for 15-minute intervals.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetMinuteForecast(ctx context.Context, query string, interval *int32, language string) (result MinuteForecastResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetMinuteForecast")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetMinuteForecastPreparer(ctx, query, interval, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetMinuteForecast", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetMinuteForecastSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetMinuteForecast", resp, "Failure sending request")
        return
        }

        result, err = client.GetMinuteForecastResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetMinuteForecast", resp, "Failure responding to request")
        return
        }

    return
}

    // GetMinuteForecastPreparer prepares the GetMinuteForecast request.
    func (client WeatherClient) GetMinuteForecastPreparer(ctx context.Context, query string, interval *int32, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if interval != nil {
        queryParameters["interval"] = autorest.Encode("query",*interval)
            } else {
            queryParameters["interval"] = autorest.Encode("query",1)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/forecast/minute/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetMinuteForecastSender sends the GetMinuteForecast request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetMinuteForecastSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetMinuteForecastResponder handles the response to the GetMinuteForecast request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetMinuteForecastResponder(resp *http.Response) (result MinuteForecastResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetQuarterDayForecast **Get Quarter-Day Forecast**
//
//
// **Applies to**: S0 and S1 pricing tiers.
//
//
// Service returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given location.
// Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details such as
// temperature, humidity, wind, precipitation, and UV index are returned.
    // Parameters:
        // query - coordinates of the location for which quarter-day forecast information is requested. The applicable
        // query is specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // unit - specifies to return the data in either metric units or imperial units. Default value is metric.
        // duration - specifies for how many days the quester-day forecast responses are returned. Supported values
        // are:
        // * `1` - Return forecast data for the next day. Returned by default.
        // * `5` - Return forecast data for the next 5 days.
        // * `10` - Return forecast data for next 10 days.
        // * `15` - Return forecast data for the next 15 days.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetQuarterDayForecast(ctx context.Context, query string, unit Unit, duration *int32, language string) (result QuarterDayForecastResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetQuarterDayForecast")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetQuarterDayForecastPreparer(ctx, query, unit, duration, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetQuarterDayForecast", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetQuarterDayForecastSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetQuarterDayForecast", resp, "Failure sending request")
        return
        }

        result, err = client.GetQuarterDayForecastResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetQuarterDayForecast", resp, "Failure responding to request")
        return
        }

    return
}

    // GetQuarterDayForecastPreparer prepares the GetQuarterDayForecast request.
    func (client WeatherClient) GetQuarterDayForecastPreparer(ctx context.Context, query string, unit Unit, duration *int32, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(string(unit)) > 0 {
        queryParameters["unit"] = autorest.Encode("query",unit)
            } else {
            queryParameters["unit"] = autorest.Encode("query","metric")
        }
        if duration != nil {
        queryParameters["duration"] = autorest.Encode("query",*duration)
            } else {
            queryParameters["duration"] = autorest.Encode("query",1)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/forecast/quarterDay/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetQuarterDayForecastSender sends the GetQuarterDayForecast request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetQuarterDayForecastSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetQuarterDayForecastResponder handles the response to the GetQuarterDayForecast request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetQuarterDayForecastResponder(resp *http.Response) (result QuarterDayForecastResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetSevereWeatherAlerts **Get Severe Weather Alerts**
//
// **Applies to**: S0 and S1 pricing tiers.
//
// Severe weather phenomenon can significantly impact our everyday life and business operations. For example, severe
// weather conditions such as tropical storms, high winds or flooding can close roads and force logistics companies to
// reroute their fleet causing delays in reaching destinations and breaking the cold chain of refrigerated food
// products.â€¯ Azure Maps Severeâ€¯Weatherâ€¯Alerts API returns the severeâ€¯weatherâ€¯alerts that are available worldwide from
// bothâ€¯official Government Meteorological Agencies and leading globalâ€¯to regionalâ€¯weatherâ€¯alert providers. The service
// can return details such as alert type, category, level and detailed description about the active severe alerts for
// the requested location,â€¯like hurricanes, thunderstorms, lightning, heat waves or forest fires.
    // Parameters:
        // query - coordinates of the location for which severe weather alerts are requested. The applicable query is
        // specified as a comma separated string composed by latitude followed by longitude e.g.
        // "47.641268,-122.125679".
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
        // details - return full details for the severe weather alerts. Available values are
        // * `true` - Returns full details. By default all details are returned.
        // * `false` - Returns a truncated version of the alerts data, which excludes the area-specific full
        // description of alert details (`alertDetails`).
func (client WeatherClient) GetSevereWeatherAlerts(ctx context.Context, query string, language string, details string) (result SevereWeatherAlertsResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetSevereWeatherAlerts")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetSevereWeatherAlertsPreparer(ctx, query, language, details)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetSevereWeatherAlerts", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetSevereWeatherAlertsSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetSevereWeatherAlerts", resp, "Failure sending request")
        return
        }

        result, err = client.GetSevereWeatherAlertsResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetSevereWeatherAlerts", resp, "Failure responding to request")
        return
        }

    return
}

    // GetSevereWeatherAlertsPreparer prepares the GetSevereWeatherAlerts request.
    func (client WeatherClient) GetSevereWeatherAlertsPreparer(ctx context.Context, query string, language string, details string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }
        if len(details) > 0 {
        queryParameters["details"] = autorest.Encode("query",details)
            } else {
            queryParameters["details"] = autorest.Encode("query","true")
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/severe/alerts/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSevereWeatherAlertsSender sends the GetSevereWeatherAlerts request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetSevereWeatherAlertsSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetSevereWeatherAlertsResponder handles the response to the GetSevereWeatherAlerts request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetSevereWeatherAlertsResponder(resp *http.Response) (result SevereWeatherAlertsResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// GetWeatherAlongRoute **Get Weather along route**
//
//
// **Applies to**: S1 pricing tier.
//
// Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts, weather
// hazard assessments, and notifications along a route described as a sequence of waypoints.
// This includes a list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each
// waypoint might be used to paint each portion of a route according to how safe it is for the driver. When submitting
// the waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or
// shortly after. Data is updated every five minutes.
//
// The service supplements Azure Maps [Route Service](https://docs.microsoft.com/rest/api/maps/route) that allows you
// to first request a route between an origin and a destination and use that as an input for Weather Along Route
// endpoint.
//
// In addition, the service supports scenarios to generate weather notifications for waypoints that experience an
// increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy rain
// as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing the end
// product to display a heavy rain notification before the driver reaches that waypoint.
// The trigger for when to display the notification for a waypoint could be based, for example, on a
// [geofence](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the
// waypoint.
//
// The API covers all regions of the planet except latitudes above Greenland and Antarctica.
    // Parameters:
        // query - coordinates through which the route is calculated, separated by colon (:) and entered in
        // chronological order. A minimum of two waypoints is required. A single API call may contain up to 60
        // waypoints.
        // A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where
        // * `Latitude` - Latitude coordinate in decimal degrees.
        // * `Longitude` - Longitude coordinate in decimal degrees.
        // * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the
        // vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes.
        // * `Heading` - An optional value indicating the vehicle heading as it passes the waypoint. Expressed in
        // clockwise degrees relative to true north. This is issued to calculate sun glare as a driving hazard. Allowed
        // range is from 0.0 to 360.0 degrees. If not provided, a heading will automatically be derived based on the
        // position of neighboring waypoints.
        //
        // It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly
        // after. This way a more accurate assessment can be provided for the trip and prevent isolated events not
        // being captured between waypoints.  Information can and should be updated along the route (especially for
        // trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that
        // forecast information for content such as precipitation type and intensity is accurate as storms develop and
        // dissipate over time.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.  Default value is en-us.
        //
        // Please refer to [Supported languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for
        // details.
func (client WeatherClient) GetWeatherAlongRoute(ctx context.Context, query string, language string) (result WeatherAlongRouteResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/WeatherClient.GetWeatherAlongRoute")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetWeatherAlongRoutePreparer(ctx, query, language)
    if err != nil {
    err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetWeatherAlongRoute", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetWeatherAlongRouteSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetWeatherAlongRoute", resp, "Failure sending request")
        return
        }

        result, err = client.GetWeatherAlongRouteResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "maps.WeatherClient", "GetWeatherAlongRoute", resp, "Failure responding to request")
        return
        }

    return
}

    // GetWeatherAlongRoutePreparer prepares the GetWeatherAlongRoute request.
    func (client WeatherClient) GetWeatherAlongRoutePreparer(ctx context.Context, query string, language string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "format": autorest.Encode("path", "json"),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "query": autorest.Encode("query",query),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/weather/route/{format}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetWeatherAlongRouteSender sends the GetWeatherAlongRoute request. The method will close the
    // http.Response Body if it receives an error.
    func (client WeatherClient) GetWeatherAlongRouteSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetWeatherAlongRouteResponder handles the response to the GetWeatherAlongRoute request. The method always
    // closes the http.Response Body.
    func (client WeatherClient) GetWeatherAlongRouteResponder(resp *http.Response) (result WeatherAlongRouteResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

