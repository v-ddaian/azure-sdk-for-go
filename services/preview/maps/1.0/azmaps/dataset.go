package azmaps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// DatasetClient is the client for the Dataset methods of the Azmaps service.
type DatasetClient struct {
    BaseClient
}
// NewDatasetClient creates an instance of the DatasetClient client.
func NewDatasetClient(subscriptionKey string, xMsClientID string) DatasetClient {
    return NewDatasetClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewDatasetClientWithBaseURI creates an instance of the DatasetClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewDatasetClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) DatasetClient {
        return DatasetClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// CreatePreview **Dataset Create API**
//
// **Applies to:** S1 pricing tier.
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
// and SDK. The Dataset APIs are part of Creator. This API allows the caller to create a dataset from data that
// was uploaded to the Azure Maps Data Service.
//
// You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package using
// the Azure Maps Conversion Service, creating a dataset from the converted zip package. The created dataset can be
// used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS Service.
//
// ## Submit Create Request
//
// To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an id that
// represents
// the converted DWG zip package, the `type` parameter will describe the data type to use for the dataset, the
// `datasetId`
// parameter will describe if the provided data should be appended to a current dataset and, optionally, the
// `description` query parameter will contain a description (if description is not provided a default description will
// be
// given).
//
// The Create API is a
// [long-running request](https://aka.ms/am-creator-lrt).
    // Parameters:
        // conversionID - the unique ID used to create the dataset. The `conversionId` must have been obtained from a
        // successful call to the Conversion Service Convert API and must be provided with multiple query parameters
        // with same name (if more than one is provided). May not be provided in conjunction with the `udid` query
        // parameter.
        // udid - the unique data ID used to create the dataset. The `udid` must have been obtained from a successful
        // call to the Data Service Upload API and must be provided with multiple query parameters with the same name
        // (if more than one is provided). May not be provided in conjunction with `conversionId` query parameter.
        // datasetID - the ID for the dataset to append to.
        // description - the description to be given to the dataset.
func (client DatasetClient) CreatePreview(ctx context.Context, conversionID string, udid string, datasetID string, description string) (result DatasetCreatePreviewFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.CreatePreview")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreviewPreparer(ctx, conversionID, udid, datasetID, description)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "CreatePreview", nil , "Failure preparing request")
    return
    }

        result, err = client.CreatePreviewSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "CreatePreview", nil , "Failure sending request")
        return
        }

    return
}

    // CreatePreviewPreparer prepares the CreatePreview request.
    func (client DatasetClient) CreatePreviewPreparer(ctx context.Context, conversionID string, udid string, datasetID string, description string) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "type": autorest.Encode("query", "facility"),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(conversionID) > 0 {
        queryParameters["conversionId"] = autorest.Encode("query",conversionID)
        }
        if len(udid) > 0 {
        queryParameters["udid"] = autorest.Encode("query",udid)
        }
        if len(datasetID) > 0 {
        queryParameters["datasetId"] = autorest.Encode("query",datasetID)
        }
        if len(description) > 0 {
        queryParameters["description"] = autorest.Encode("query",description)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/dataset/create"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreatePreviewSender sends the CreatePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) CreatePreviewSender(req *http.Request) (future DatasetCreatePreviewFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // CreatePreviewResponder handles the response to the CreatePreview request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) CreatePreviewResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeletePreview **Dataset Delete API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Dataset APIs are part of Creator.
// This API allows the caller to delete a previously created dataset.<br>
// You can also use this API to delete old/unused datasets to create space for new Creator content.
//
//
// ### Submit Delete Request
//
// To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the dataset
// to delete.<br>
//
//
// ### Delete Data Response
//
// The Delete API returns a HTTP `204 No Content` response if the dataset resource was deleted successfully.<br>
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
func (client DatasetClient) DeletePreview(ctx context.Context, datasetID string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.DeletePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreviewPreparer(ctx, datasetID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "DeletePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeletePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "DeletePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeletePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "DeletePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreviewPreparer prepares the DeletePreview request.
    func (client DatasetClient) DeletePreviewPreparer(ctx context.Context, datasetID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/dataset/{datasetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeletePreviewSender sends the DeletePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) DeletePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeletePreviewResponder handles the response to the DeletePreview request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) DeletePreviewResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ImportPreview **Dataset Import API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API
// and SDK. The Dataset APIs are part of Creator. This API allows the caller to bulk import data into a dataset
// from data that was uploaded to the Azure Maps Data service.<br>
//
// ### Submit Import Request
//
// To import data into your dataset, you will use a `PATCH` request where the `datasetId` query parameter is the
// dataset you want to import your data into, the `udid` query parameter is the data you want to import, and the `type`
// parameter will describe the data type to use for the import data.<br>
//
// The Import API is a
// [long-running request](https://aka.ms/am-creator-lrt).
    // Parameters:
        // datasetID - the identifier for the dataset to query from.
        // udid - the unique data ID used to import data into the dataset. The `udid` must have been obtained from a
        // successful call to the Data Service Upload API.
func (client DatasetClient) ImportPreview(ctx context.Context, datasetID string, udid string) (result DatasetImportPreviewFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.ImportPreview")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ImportPreviewPreparer(ctx, datasetID, udid)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "ImportPreview", nil , "Failure preparing request")
    return
    }

        result, err = client.ImportPreviewSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "ImportPreview", nil , "Failure sending request")
        return
        }

    return
}

    // ImportPreviewPreparer prepares the ImportPreview request.
    func (client DatasetClient) ImportPreviewPreparer(ctx context.Context, datasetID string, udid string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "datasetId": autorest.Encode("path",datasetID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "type": autorest.Encode("query", "fixture"),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(udid) > 0 {
        queryParameters["udid"] = autorest.Encode("query",udid)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/dataset/import/{datasetId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ImportPreviewSender sends the ImportPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) ImportPreviewSender(req *http.Request) (future DatasetImportPreviewFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // ImportPreviewResponder handles the response to the ImportPreview request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) ImportPreviewResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListPreview **Dataset List API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Dataset APIs are part of Creator.
// This API allows the caller to fetch a list of all previously successfully created datasets.
//
//
// ### Submit List Request
//
// To list all your datasets, you will issue a `GET` request with no additional parameters.<br>
//
//
// ### List Data Response
//
// The List API returns the complete list of all datasets in `json` format. The response contains the following fields
// (if they are not null or empty):
// > created - The timestamp the dataset was created.
// > datasetId - The id for the dataset.
// > description - The description for the dataset.
// > datasetSources - The source data that was used when the create request was issued.
//
// The `datasetSources` describes the source data that was used when the create request was issued and contains the
// following elements (if they are not null or empty):
// > conversionIds - The list of `conversionId` (null if none were provided).
// > udids - The list of `udid` (null if none were provided).
// > appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
// > type - The type of data stored in the dataset that was created.
//
// Here's a sample response returning the `timestamp`, `datasetId`, `description`, and `datasetSources` of 3 dataset
// resources:
//
// <br>
//
// ```json
// {
// "datasets": [
// {
// "timestamp": "2020-01-01T22:50:48+00:00",
// "datasetId": "f6495f62-94f8-0ec2-c252-45626f82fcb2",
// "description": "Some description or comment for the dataset.",
// "datasetSources": {
// "conversionIds": [
// "15d21452-c9bb-27b6-5e79-743ca5c3205d"
// ],
// "type": "facility"
// },
// "status": "Succeeded"
// },
// {
// "timestamp": "2020-01-01T22:57:53+00:00",
// "datasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c",
// "description": "Create from upload '0c1288fa-2058-4a1b-b68d-13a5f5af7d7c'.",
// "datasetSources": {
// "udids": [
// "0c1288fa-2058-4a1b-b68d-13a5f5af7d7c"
// ],
// "type": "facility"
// },
// "status": "Succeeded"
// },
// {
// "timestamp": "2020-01-01T20:39:36+00:00",
// "datasetId": "7c1288fa-2058-4a1b-b68f-13a6h5af7d7c",
// "description": "Some other description or comment for the dataset.",
// "datasetSources": {
// "conversionIds": [
// "15d21452-c9bb-27b6-5e79-743ca5c3205d"
// ],
// "appendDatasetId": "8b1288fa-1958-4a2b-b68e-13a7i5af7d7c",
// "type": "facility"
// },
// "status": "Succeeded"
// }
// ]
// }
// ```
// <br>
func (client DatasetClient) ListPreview(ctx context.Context) (result DatasetListResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/DatasetClient.ListPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ListPreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "ListPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "ListPreview", resp, "Failure sending request")
        return
        }

        result, err = client.ListPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.DatasetClient", "ListPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // ListPreviewPreparer prepares the ListPreview request.
    func (client DatasetClient) ListPreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/dataset"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListPreviewSender sends the ListPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client DatasetClient) ListPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListPreviewResponder handles the response to the ListPreview request. The method always
    // closes the http.Response Body.
    func (client DatasetClient) ListPreviewResponder(resp *http.Response) (result DatasetListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

