package azmapsapi

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "$(go-sdk-folder)/services/preview/maps/1.0/azmaps"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
)

        // AliasClientAPI contains the set of methods on the AliasClient type.
        type AliasClientAPI interface {
            AssignPreview(ctx context.Context, aliasID string, resourceID string) (result azmaps.SetObject, err error)
            CreatePreview(ctx context.Context) (result azmaps.AliasCreateResponse, err error)
            DeletePreview(ctx context.Context, aliasID string) (result azmaps.SetObject, err error)
            ListPreview(ctx context.Context) (result azmaps.AliasListResponse, err error)
        }

        var _ AliasClientAPI = (*azmaps.AliasClient)(nil)
        // DataClientAPI contains the set of methods on the DataClient type.
        type DataClientAPI interface {
            DeletePreview(ctx context.Context, udid string) (result azmaps.SetObject, err error)
            DownloadPreview(ctx context.Context, udid string) (result azmaps.SetObject, err error)
            ListPreview(ctx context.Context) (result azmaps.MapDataListResponse, err error)
            UpdatePreview(ctx context.Context, udid string, updateContent interface{}) (result azmaps.DataUpdatePreviewFuture, err error)
            UploadPreview(ctx context.Context, dataFormat azmaps.UploadDataFormat, uploadContent interface{}) (result azmaps.DataUploadPreviewFuture, err error)
        }

        var _ DataClientAPI = (*azmaps.DataClient)(nil)
        // DatasetClientAPI contains the set of methods on the DatasetClient type.
        type DatasetClientAPI interface {
            CreatePreview(ctx context.Context, conversionID string, udid string, datasetID string, description string) (result azmaps.DatasetCreatePreviewFuture, err error)
            DeletePreview(ctx context.Context, datasetID string) (result azmaps.SetObject, err error)
            ImportPreview(ctx context.Context, datasetID string, udid string) (result azmaps.DatasetImportPreviewFuture, err error)
            ListPreview(ctx context.Context) (result azmaps.DatasetListResponse, err error)
        }

        var _ DatasetClientAPI = (*azmaps.DatasetClient)(nil)
        // ElevationClientAPI contains the set of methods on the ElevationClient type.
        type ElevationClientAPI interface {
            GetDataForBoundingBox(ctx context.Context, bounds []string, rows float64, columns float64) (result azmaps.BoundingBoxResult, err error)
            GetDataForPoints(ctx context.Context, points [][]string) (result azmaps.PointsResult, err error)
            GetDataForPolyline(ctx context.Context, lines [][]string, samples *float64) (result azmaps.LinesResult, err error)
            PostDataForPoints(ctx context.Context, pointsRequestBody []azmaps.CoordinateAbbreviated) (result azmaps.PointsResult, err error)
            PostDataForPolyline(ctx context.Context, linesRequestBody []azmaps.CoordinateAbbreviated, samples *float64) (result azmaps.LinesResult, err error)
        }

        var _ ElevationClientAPI = (*azmaps.ElevationClient)(nil)
        // ConversionClientAPI contains the set of methods on the ConversionClient type.
        type ConversionClientAPI interface {
            ConvertPreview(ctx context.Context, udid string, description string) (result azmaps.ConversionConvertPreviewFuture, err error)
            DeletePreview(ctx context.Context, conversionID string) (result azmaps.SetObject, err error)
            ListPreview(ctx context.Context) (result azmaps.ConversionListResponse, err error)
        }

        var _ ConversionClientAPI = (*azmaps.ConversionClient)(nil)
        // FeatureStateClientAPI contains the set of methods on the FeatureStateClient type.
        type FeatureStateClientAPI interface {
            CreateStatesetPreview(ctx context.Context, datasetID string, statesetCreateRequestBody azmaps.StylesObject) (result azmaps.StatesetCreatedResponse, err error)
            DeleteStatePreview(ctx context.Context, statesetID string, featureID string, stateKeyName string) (result autorest.Response, err error)
            DeleteStatesetPreview(ctx context.Context, statesetID string) (result autorest.Response, err error)
            GetStatesetPreview(ctx context.Context, statesetID string) (result azmaps.StatesetGetResponse, err error)
            GetStatesPreview(ctx context.Context, statesetID string, featureID string) (result azmaps.FeatureStatesStructure, err error)
            ListStatesetPreview(ctx context.Context) (result azmaps.StatesetListResponse, err error)
            PutStatesetPreview(ctx context.Context, statesetID string, statesetStyleUpdateRequestBody azmaps.StylesObject) (result autorest.Response, err error)
            UpdateStatesPreview(ctx context.Context, statesetID string, featureID string, featureStateUpdateRequestBody azmaps.FeatureStatesStructure) (result autorest.Response, err error)
        }

        var _ FeatureStateClientAPI = (*azmaps.FeatureStateClient)(nil)
        // GeolocationClientAPI contains the set of methods on the GeolocationClient type.
        type GeolocationClientAPI interface {
            GetIPToLocationPreview(ctx context.Context, IP string) (result azmaps.IPAddressToLocationResult, err error)
        }

        var _ GeolocationClientAPI = (*azmaps.GeolocationClient)(nil)
        // MobilityClientAPI contains the set of methods on the MobilityClient type.
        type MobilityClientAPI interface {
            GetMetroAreaInfoPreview(ctx context.Context, query int32, detailType []azmaps.MetroAreaDetailType, language string) (result azmaps.MetroAreaInfoResponse, err error)
            GetMetroAreaPreview(ctx context.Context, query string, queryType azmaps.MetroAreaQueryType, language string) (result azmaps.MetroAreaResponse, err error)
            GetNearbyTransitPreview(ctx context.Context, query string, metroID *int32, limit *int32, radius *int32, objectType string, language string) (result azmaps.NearbyTransitResponse, err error)
            GetRealTimeArrivalsPreview(ctx context.Context, query string, metroID *int32, queryType azmaps.RealTimeArrivalsQueryType, stopQueryType azmaps.StopQueryType, limit *int32, maxMinutesInFuture *int32, transitType []azmaps.TransitTypeFilter, agency []string, agencyType azmaps.AgencyType, timeoutInSeconds *int32, language string) (result azmaps.RealTimeArrivalsResponse, err error)
            GetTransitItineraryPreview(ctx context.Context, query string, detailType []azmaps.TransitItineraryDetailType, language string) (result azmaps.TransitItineraryResponse, err error)
            GetTransitLineInfoPreview(ctx context.Context, query string, metroID *int32, detailType []azmaps.TransitLineDetailType, language string) (result azmaps.TransitLineInfoResponse, err error)
            GetTransitRoutePreview(ctx context.Context, origin string, destination string, metroID *int32, originType azmaps.OriginType, destinationType azmaps.DestinationType, modeType []azmaps.ModeType, transitType []azmaps.TransitTypeFilter, agency []string, agencyType azmaps.AgencyType, timeParameter string, timeType azmaps.TimeType, routeType azmaps.TransitRouteType, bikeType string, language string) (result azmaps.TransitRouteResponse, err error)
            GetTransitStopInfoPreview(ctx context.Context, query string, metroID *int32, queryType azmaps.TransitStopQueryType, detailType []azmaps.TransitStopDetailType, language string) (result azmaps.TransitStopInfoResponse, err error)
        }

        var _ MobilityClientAPI = (*azmaps.MobilityClient)(nil)
        // RenderClientAPI contains the set of methods on the RenderClient type.
        type RenderClientAPI interface {
            GetCopyrightCaption(ctx context.Context, formatParameter azmaps.TextFormat) (result azmaps.CopyrightCaptionResult, err error)
            GetCopyrightForTile(ctx context.Context, formatParameter azmaps.TextFormat, zoom int32, xTileIndex int32, yTileIndex int32, textParameter string) (result azmaps.CopyrightTileResult, err error)
            GetCopyrightForWorld(ctx context.Context, formatParameter azmaps.TextFormat, textParameter string) (result azmaps.CopyrightWorldResult, err error)
            GetCopyrightFromBoundingBox(ctx context.Context, formatParameter azmaps.TextFormat, mincoordinates string, maxcoordinates string, textParameter string) (result azmaps.CopyrightBoundingResult, err error)
            GetMapImage(ctx context.Context, layer azmaps.StaticMapLayer, style azmaps.MapImageStyle, zoom *int32, center string, bbox string, height *int32, width *int32, language string, view string, pins []string, pathParameter []string) (result azmaps.ReadCloser, err error)
            GetMapImageryTile(ctx context.Context, zoom int32, xTileIndex int32, yTileIndex int32) (result azmaps.ReadCloser, err error)
            GetMapStateTilePreview(ctx context.Context, zoom int32, xTileIndex int32, yTileIndex int32, statesetID string) (result azmaps.ReadCloser, err error)
            GetMapTile(ctx context.Context, formatParameter azmaps.TileFormat, layer azmaps.MapTileLayer, style azmaps.MapTileStyle, zoom int32, xTileIndex int32, yTileIndex int32, tileSize azmaps.MapTileSize, language string, view string) (result azmaps.ReadCloser, err error)
        }

        var _ RenderClientAPI = (*azmaps.RenderClient)(nil)
        // RenderV2ClientAPI contains the set of methods on the RenderV2Client type.
        type RenderV2ClientAPI interface {
            GetMapTilePreview(ctx context.Context, tilesetID azmaps.TilesetID, zoom int32, xTileIndex int32, yTileIndex int32, timeStamp string, tileSize azmaps.TileSize, language string, view string) (result azmaps.String, err error)
        }

        var _ RenderV2ClientAPI = (*azmaps.RenderV2Client)(nil)
        // RouteClientAPI contains the set of methods on the RouteClient type.
        type RouteClientAPI interface {
            GetRouteDirections(ctx context.Context, formatParameter azmaps.TextFormat, query string, maxAlternatives *int32, alternativeType azmaps.AlternativeRouteType, minDeviationDistance *int32, arriveAt *date.Time, departAt *date.Time, minDeviationTime *int32, instructionsType azmaps.RouteInstructionsType, language string, computeBestOrder *bool, routeRepresentation azmaps.RouteRepresentation, computeTravelTimeFor azmaps.ComputeTravelTimeFor, vehicleHeading *int32, report string, sectionType azmaps.SectionType, vehicleAxleWeight *int32, vehicleWidth *float64, vehicleHeight *float64, vehicleLength *float64, vehicleMaxSpeed *int32, vehicleWeight *int32, vehicleCommercial *bool, windingness azmaps.Windingness, hilliness azmaps.Hilliness, travelMode azmaps.TravelMode, avoid azmaps.Avoid, traffic *bool, routeType azmaps.RouteType, vehicleLoadType azmaps.VehicleLoadType, vehicleEngineType azmaps.VehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm *float64, currentFuelInLiters *float64, auxiliaryPowerInLitersPerHour *float64, fuelEnergyDensityInMJoulesPerLiter *float64, accelerationEfficiency *float64, decelerationEfficiency *float64, uphillEfficiency *float64, downhillEfficiency *float64, constantSpeedConsumptionInkWhPerHundredkm string, currentChargeInkWh string, maxChargeInkWh string, auxiliaryPowerInkW string) (result azmaps.RouteDirectionsResponse, err error)
            GetRouteRange(ctx context.Context, formatParameter azmaps.TextFormat, query string, fuelBudgetInLiters *float64, energyBudgetInkWh *float64, timeBudgetInSec *float64, distanceBudgetInMeters *float64, departAt *date.Time, routeType azmaps.RouteType, traffic *bool, avoid azmaps.Avoid, travelMode azmaps.TravelMode, hilliness azmaps.Hilliness, windingness azmaps.Windingness, vehicleAxleWeight *int32, vehicleWidth *float64, vehicleHeight *float64, vehicleLength *float64, vehicleMaxSpeed *int32, vehicleWeight *int32, vehicleCommercial *bool, vehicleLoadType azmaps.VehicleLoadType, vehicleEngineType azmaps.VehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm *float64, currentFuelInLiters *float64, auxiliaryPowerInLitersPerHour *float64, fuelEnergyDensityInMJoulesPerLiter *float64, accelerationEfficiency *float64, decelerationEfficiency *float64, uphillEfficiency *float64, downhillEfficiency *float64, constantSpeedConsumptionInkWhPerHundredkm string, currentChargeInkWh string, maxChargeInkWh string, auxiliaryPowerInkW string) (result azmaps.RouteRangeResponse, err error)
            PostRouteDirections(ctx context.Context, formatParameter azmaps.TextFormat, query string, routeDirectionsRequestBody azmaps.RouteDirectionsRequestBody, maxAlternatives *int32, alternativeType azmaps.AlternativeRouteType, minDeviationDistance *int32, minDeviationTime *int32, instructionsType azmaps.RouteInstructionsType, language string, computeBestOrder *bool, routeRepresentation azmaps.RouteRepresentation, computeTravelTimeFor azmaps.ComputeTravelTimeFor, vehicleHeading *int32, report string, sectionType azmaps.SectionType, arriveAt *date.Time, departAt *date.Time, vehicleAxleWeight *int32, vehicleLength *float64, vehicleHeight *float64, vehicleWidth *float64, vehicleMaxSpeed *int32, vehicleWeight *int32, vehicleCommercial *bool, windingness azmaps.Windingness, hilliness azmaps.Hilliness, travelMode azmaps.TravelMode, avoid azmaps.Avoid, traffic *bool, routeType azmaps.RouteType, vehicleLoadType azmaps.VehicleLoadType, vehicleEngineType azmaps.VehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm *float64, currentFuelInLiters *float64, auxiliaryPowerInLitersPerHour *float64, fuelEnergyDensityInMJoulesPerLiter *float64, accelerationEfficiency *float64, decelerationEfficiency *float64, uphillEfficiency *float64, downhillEfficiency *float64, constantSpeedConsumptionInkWhPerHundredkm string, currentChargeInkWh string, maxChargeInkWh string, auxiliaryPowerInkW string) (result azmaps.RouteDirectionsResponse, err error)
            PostRouteDirectionsBatch(ctx context.Context, routeDirectionsBatchRequestBody azmaps.BatchRequestBody) (result azmaps.RoutePostRouteDirectionsBatchFuture, err error)
            PostRouteMatrix(ctx context.Context, routeMatrixBody azmaps.RouteMatrixRequestBody, waitForResults *bool, computeTravelTimeFor azmaps.ComputeTravelTimeFor, sectionType azmaps.SectionType, arriveAt *date.Time, departAt *date.Time, vehicleAxleWeight *int32, vehicleLength *float64, vehicleHeight *float64, vehicleWidth *float64, vehicleMaxSpeed *int32, vehicleWeight *int32, windingness azmaps.Windingness, hilliness azmaps.Hilliness, travelMode azmaps.TravelMode, avoid azmaps.Avoid, traffic *bool, routeType azmaps.RouteType, vehicleLoadType azmaps.VehicleLoadType) (result azmaps.RoutePostRouteMatrixFuture, err error)
        }

        var _ RouteClientAPI = (*azmaps.RouteClient)(nil)
        // SearchClientAPI contains the set of methods on the SearchClient type.
        type SearchClientAPI interface {
            GetSearchAddress(ctx context.Context, formatParameter azmaps.TextFormat, query string, typeahead *bool, limit *int32, ofs *int32, countrySet []string, lat *float64, lon *float64, radius *float64, topLeft string, btmRight string, language string, extendedPostalCodesFor string, view string) (result azmaps.SearchAddressResponse, err error)
            GetSearchAddressReverse(ctx context.Context, formatParameter azmaps.TextFormat, query string, language string, returnSpeedLimit *bool, heading *float64, radius *float64, number string, returnRoadUse *bool, roadUse string, allowFreeformNewline *bool, returnMatchType *bool, entityType azmaps.EntityType, view string) (result azmaps.SearchAddressReverseResponse, err error)
            GetSearchAddressReverseCrossStreet(ctx context.Context, formatParameter azmaps.TextFormat, query string, limit *int32, heading *float64, radius *float64, language string, view string) (result azmaps.SearchAddressReverseCrossStreetResponse, err error)
            GetSearchAddressStructured(ctx context.Context, formatParameter azmaps.TextFormat, countryCode string, language string, limit *int32, ofs *int32, streetNumber string, streetName string, crossStreet string, municipality string, municipalitySubdivision string, countryTertiarySubdivision string, countrySecondarySubdivision string, countrySubdivision string, postalCode string, extendedPostalCodesFor string, view string) (result azmaps.SearchAddressStructuredResponse, err error)
            GetSearchFuzzy(ctx context.Context, formatParameter azmaps.TextFormat, query string, typeahead *bool, limit *int32, ofs *int32, categorySet []int32, countrySet []string, lat *float64, lon *float64, radius *float64, topLeft string, btmRight string, language string, extendedPostalCodesFor string, minFuzzyLevel *int32, maxFuzzyLevel *int32, idxSet []azmaps.SearchIndexSet, brandSet []string, connectorSet []azmaps.ConnectorSet, view string, openingHours azmaps.OpeningHours) (result azmaps.SearchFuzzyResponse, err error)
            GetSearchNearby(ctx context.Context, formatParameter azmaps.TextFormat, lat float64, lon float64, limit *int32, ofs *int32, categorySet []int32, countrySet []string, radius *float64, language string, extendedPostalCodesFor string, brandSet []string, connectorSet []azmaps.ConnectorSet, view string) (result azmaps.SearchNearbyResponse, err error)
            GetSearchPOI(ctx context.Context, formatParameter azmaps.TextFormat, query string, typeahead *bool, limit *int32, ofs *int32, categorySet []int32, countrySet []string, lat *float64, lon *float64, radius *float64, topLeft string, btmRight string, language string, extendedPostalCodesFor string, brandSet []string, connectorSet []azmaps.ConnectorSet, view string, openingHours azmaps.OpeningHours) (result azmaps.SearchPoiResponse, err error)
            GetSearchPOICategory(ctx context.Context, formatParameter azmaps.TextFormat, query string, typeahead *bool, limit *int32, ofs *int32, categorySet []int32, countrySet []string, lat *float64, lon *float64, radius *float64, topLeft string, btmRight string, language string, extendedPostalCodesFor string, brandSet []string, connectorSet []azmaps.ConnectorSet, view string, openingHours azmaps.OpeningHours) (result azmaps.SearchPoiCategoryResponse, err error)
            GetSearchPOICategoryTreePreview(ctx context.Context, language string) (result azmaps.PoiCategoryResponse, err error)
            GetSearchPolygon(ctx context.Context, geometries string) (result azmaps.SearchPolygonResponse, err error)
            PostSearchAddressBatch(ctx context.Context, searchAddressBatchRequestBody azmaps.BatchRequestBody) (result azmaps.SearchPostSearchAddressBatchFuture, err error)
            PostSearchAddressReverseBatch(ctx context.Context, searchAddressReverseBatchRequestBody azmaps.BatchRequestBody) (result azmaps.SearchPostSearchAddressReverseBatchFuture, err error)
            PostSearchAlongRoute(ctx context.Context, query string, formatParameter azmaps.TextFormat, maxDetourTime int32, searchAlongRouteRequestBody azmaps.SearchAlongRouteRequestBody, categorySet []int32, limit *int32, brandSet []string, connectorSet []azmaps.ConnectorSet, view string, openingHours azmaps.OpeningHours) (result azmaps.SearchAlongRouteResponse, err error)
            PostSearchFuzzyBatch(ctx context.Context, searchFuzzyBatchRequestBody azmaps.BatchRequestBody) (result azmaps.SearchPostSearchFuzzyBatchFuture, err error)
            PostSearchInsideGeometry(ctx context.Context, query string, formatParameter azmaps.TextFormat, searchInsideGeometryRequestBody azmaps.SearchInsideGeometryRequestBody, limit *int32, language string, categorySet []int32, extendedPostalCodesFor string, idxSet []azmaps.SearchIndexSet, view string, openingHours azmaps.OpeningHours) (result azmaps.SearchGeometryResponse, err error)
        }

        var _ SearchClientAPI = (*azmaps.SearchClient)(nil)
        // SpatialClientAPI contains the set of methods on the SpatialClient type.
        type SpatialClientAPI interface {
            GetBuffer(ctx context.Context, udid string, distances string) (result azmaps.BufferResponse, err error)
            GetClosestPoint(ctx context.Context, udid string, lat float64, lon float64, numberOfClosestPoints *int32) (result azmaps.GetClosestPointResponse, err error)
            GetGeofence(ctx context.Context, deviceID string, udID string, lat float64, lon float64, z *float64, userTime string, searchBuffer *float64, isAsync *bool, mode azmaps.GeofenceMode) (result azmaps.GeofenceResponse, err error)
            GetGreatCircleDistance(ctx context.Context, query string) (result azmaps.GreatCircleDistanceResponse, err error)
            GetPointInPolygon(ctx context.Context, udid string, lat float64, lon float64) (result azmaps.GetPointInPolygonResponse, err error)
            PostBuffer(ctx context.Context, bufferRequestBody azmaps.BufferRequestBody) (result azmaps.BufferResponse, err error)
            PostClosestPoint(ctx context.Context, lat float64, lon float64, closestPointRequestBody azmaps.GeoJSONFeatureCollection, numberOfClosestPoints *int32) (result azmaps.PostClosestPointResponse, err error)
            PostGeofence(ctx context.Context, deviceID string, lat float64, lon float64, searchGeofenceRequestBody azmaps.GeoJSONFeatureCollection, z *float64, userTime string, searchBuffer *float64, isAsync *bool, mode azmaps.GeofenceMode) (result azmaps.GeofenceResponse, err error)
            PostPointInPolygon(ctx context.Context, lat float64, lon float64, pointInPolygonRequestBody azmaps.GeoJSONFeatureCollection) (result azmaps.PostPointInPolygonResponse, err error)
        }

        var _ SpatialClientAPI = (*azmaps.SpatialClient)(nil)
        // TilesetClientAPI contains the set of methods on the TilesetClient type.
        type TilesetClientAPI interface {
            CreatePreview(ctx context.Context, datasetID string, description string) (result azmaps.TilesetCreatePreviewFuture, err error)
            DeletePreview(ctx context.Context, tilesetID string) (result azmaps.SetObject, err error)
            ListPreview(ctx context.Context) (result azmaps.TilesetListResponse, err error)
        }

        var _ TilesetClientAPI = (*azmaps.TilesetClient)(nil)
        // TimezoneClientAPI contains the set of methods on the TimezoneClient type.
        type TimezoneClientAPI interface {
            GetTimezoneByCoordinates(ctx context.Context, query string, acceptLanguage string, options azmaps.TimezoneOptions, timeStamp *date.Time, transitionsFrom *date.Time, transitionsYears *int32) (result azmaps.TimezoneByCoordinatesResult, err error)
            GetTimezoneByID(ctx context.Context, query string, acceptLanguage string, options azmaps.TimezoneOptions, timeStamp *date.Time, transitionsFrom *date.Time, transitionsYears *int32) (result azmaps.TimezoneByIDResult, err error)
            GetTimezoneEnumIANA(ctx context.Context) (result azmaps.ListIanaID, err error)
            GetTimezoneEnumWindows(ctx context.Context) (result azmaps.ListTimezoneEnumWindow, err error)
            GetTimezoneIANAVersion(ctx context.Context) (result azmaps.TimezoneIanaVersionResult, err error)
            GetTimezoneWindowsToIANA(ctx context.Context, query string, territory string) (result azmaps.ListIanaID, err error)
        }

        var _ TimezoneClientAPI = (*azmaps.TimezoneClient)(nil)
        // TrafficClientAPI contains the set of methods on the TrafficClient type.
        type TrafficClientAPI interface {
            GetTrafficFlowSegment(ctx context.Context, formatParameter azmaps.TextFormat, style azmaps.TrafficFlowSegmentStyle, zoom int32, query string, unit azmaps.SpeedUnit, thickness *int32, openLr *bool) (result azmaps.TrafficFlowSegmentResult, err error)
            GetTrafficFlowTile(ctx context.Context, formatParameter azmaps.TileFormat, style azmaps.TrafficFlowTileStyle, zoom int32, xTileIndex int32, yTileIndex int32, thickness *int32) (result azmaps.String, err error)
            GetTrafficIncidentDetail(ctx context.Context, formatParameter azmaps.TextFormat, style azmaps.TrafficIncidentDetailStyle, boundingbox string, boundingZoom int32, trafficmodelid string, language string, projection string, geometries azmaps.IncidentGeometryType, expandCluster *bool, originalPosition *bool) (result azmaps.TrafficIncidentDetailResult, err error)
            GetTrafficIncidentTile(ctx context.Context, formatParameter azmaps.TileFormat, style azmaps.TrafficIncidentTileStyle, zoom int32, xTileIndex int32, yTileIndex int32, trafficState string) (result azmaps.TrafficIncidentTileResult, err error)
            GetTrafficIncidentViewport(ctx context.Context, formatParameter azmaps.TextFormat, boundingbox string, boundingzoom int32, overviewbox string, overviewzoom int32, copyright bool) (result azmaps.TrafficIncidentViewportResult, err error)
        }

        var _ TrafficClientAPI = (*azmaps.TrafficClient)(nil)
        // WeatherClientAPI contains the set of methods on the WeatherClient type.
        type WeatherClientAPI interface {
            GetCurrentConditions(ctx context.Context, query string, unit azmaps.Unit, details string, duration *int32, language string) (result azmaps.CurrentConditionsResponse, err error)
            GetDailyForecast(ctx context.Context, query string, unit azmaps.Unit, duration *int32, language string) (result azmaps.DailyForecastResponse, err error)
            GetDailyIndices(ctx context.Context, query string, language string, duration *int32, indexID *int32, indexGroupID *int32) (result azmaps.DailyIndicesResponse, err error)
            GetHourlyForecast(ctx context.Context, query string, unit azmaps.Unit, duration *int32, language string) (result azmaps.HourlyForecastResponse, err error)
            GetMinuteForecast(ctx context.Context, query string, interval *int32, language string) (result azmaps.MinuteForecastResponse, err error)
            GetQuarterDayForecast(ctx context.Context, query string, unit azmaps.Unit, duration *int32, language string) (result azmaps.QuarterDayForecastResponse, err error)
            GetSevereWeatherAlerts(ctx context.Context, query string, language string, details string) (result azmaps.SevereWeatherAlertsResponse, err error)
            GetWeatherAlongRoute(ctx context.Context, query string, language string) (result azmaps.WeatherAlongRouteResponse, err error)
        }

        var _ WeatherClientAPI = (*azmaps.WeatherClient)(nil)
        // WFSClientAPI contains the set of methods on the WFSClient type.
        type WFSClientAPI interface {
            CollectionDefinitionPreview(ctx context.Context, datasetid string, collectionID string) (result azmaps.CollectionDefinition, err error)
            CollectionDescriptionPreview(ctx context.Context, datasetid string, collectionID string) (result azmaps.CollectionInfo, err error)
            CollectionsDescriptionPreview(ctx context.Context, datasetid string) (result azmaps.Content, err error)
            DeleteFeaturePreview(ctx context.Context, datasetid string, collectionID string, featureID string) (result autorest.Response, err error)
            GetFeaturePreview(ctx context.Context, datasetid string, collectionID string, featureID string) (result azmaps.Feature, err error)
            GetFeaturesPreview(ctx context.Context, datasetid string, collectionID string, limit *float64, bbox string, filter string) (result azmaps.FeatureCollectionGeoJSON, err error)
            GetLandingPagePreview(ctx context.Context, datasetid string) (result azmaps.Root, err error)
            GetRequirementsClassesPreview(ctx context.Context, datasetid string) (result azmaps.ReqClasses, err error)
        }

        var _ WFSClientAPI = (*azmaps.WFSClient)(nil)
