package azmaps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// RenderV2Client is the client for the RenderV2 methods of the Azmaps service.
type RenderV2Client struct {
    BaseClient
}
// NewRenderV2Client creates an instance of the RenderV2Client client.
func NewRenderV2Client(subscriptionKey string, xMsClientID string) RenderV2Client {
    return NewRenderV2ClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewRenderV2ClientWithBaseURI creates an instance of the RenderV2Client client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewRenderV2ClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) RenderV2Client {
        return RenderV2Client{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// GetMapTilePreview **Applies to**: S0 and S1 pricing tiers.
//
// The Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated  into
// a map control or SDK. Some example tiles that can be requested are Azure Maps road tiles, real-time  Weather Radar
// tiles or the map tiles created using [Azure Maps Creator](https://aka.ms/amcreator). By default,  Azure Maps uses
// vector tiles for its web map control (Web SDK) and Android SDK.
    // Parameters:
        // tilesetID - a tileset is a collection of raster or vector data broken up into a uniform grid of square tiles
        // at preset  zoom levels. Every tileset has a **tilesetId** to use when making requests. The **tilesetId** for
        // tilesets created using [Azure Maps Creator](https://aka.ms/amcreator) are generated through the  [Tileset
        // Create API](https://docs.microsoft.com/en-us/rest/api/maps/tileset). The ready-to-use tilesets supplied  by
        // Azure Maps are listed below. For example, microsoft.base.
        // zoom - zoom level for the desired tile. Please find TilesetID list below for more details on supported zoom
        // level for each tilesetId.<br>
        //
        // Please see [Zoom Levels and Tile
        // Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
        // xTileIndex - x coordinate of the tile on zoom grid. Value must be in the range [0, 2<sup>`zoom`</sup> -1].
        //
        // Please see [Zoom Levels and Tile
        // Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
        // yTileIndex - y coordinate of the tile on zoom grid. Value must be in the range [0, 2<sup>`zoom`</sup> -1].
        //
        // Please see [Zoom Levels and Tile
        // Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid) for details.
        // timeStamp - the desired date and time of the requested tile. This parameter must be specified in the
        // standard date-time format (e.g. 2019-11-14T16:03:00-08:00), as defined by [ISO
        // 8601](https://en.wikipedia.org/wiki/ISO_8601). This parameter is only supported when tilesetId parameter is
        // set to one of the values below.
        //
        // * microsoft.weather.infrared.main: We provide tiles up to 3 hours in the past. Tiles are available in
        // 10-minute intervals. We round the timeStamp value to the nearest 10-minute time frame.
        // * microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the past and up to 2 hours in the
        // future. Tiles are available in 5-minute intervals. We round the timeStamp value to the nearest 5-minute time
        // frame.
        // tileSize - the size of the returned map tile in pixels.
        // language - language in which search results should be returned. Should be one of supported IETF language
        // tags, case insensitive. When data in specified language is not available for a specific field, default
        // language is used.
        //
        // Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages)
        // for details.
        // view - the View parameter specifies which set of geopolitically disputed content is returned via Azure Maps
        // services, including  borders and labels displayed on the map. The View parameter (also referred to as “user
        // region parameter”) will show the  correct maps for that country/region. By default, the View parameter is
        // set to “Unified” even if you haven’t defined it in  the request. It is your responsibility to determine the
        // location of your users, and then set the View parameter correctly  for that location. Alternatively, you
        // have the option to set ‘View=Auto’, which will return the map data based on the IP  address of the request.
        // The View parameter in Azure Maps must be used in compliance with applicable laws, including those  regarding
        // mapping, of the country where maps, images and other data and third party content that you are authorized to
        // access via Azure Maps is made available. Example: view=IN.
        //
        // Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the
        // available Views.
func (client RenderV2Client) GetMapTilePreview(ctx context.Context, tilesetID TilesetID, zoom int32, xTileIndex int32, yTileIndex int32, timeStamp string, tileSize TileSize, language string, view string) (result String, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/RenderV2Client.GetMapTilePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.GetMapTilePreviewPreparer(ctx, tilesetID, zoom, xTileIndex, yTileIndex, timeStamp, tileSize, language, view)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.RenderV2Client", "GetMapTilePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.GetMapTilePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.RenderV2Client", "GetMapTilePreview", resp, "Failure sending request")
        return
        }

        result, err = client.GetMapTilePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.RenderV2Client", "GetMapTilePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // GetMapTilePreviewPreparer prepares the GetMapTilePreview request.
    func (client RenderV2Client) GetMapTilePreviewPreparer(ctx context.Context, tilesetID TilesetID, zoom int32, xTileIndex int32, yTileIndex int32, timeStamp string, tileSize TileSize, language string, view string) (*http.Request, error) {
        const APIVersion = "2.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "tilesetId": autorest.Encode("query",tilesetID),
    "x": autorest.Encode("query",xTileIndex),
    "y": autorest.Encode("query",yTileIndex),
    "zoom": autorest.Encode("query",zoom),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(timeStamp) > 0 {
        queryParameters["timeStamp"] = autorest.Encode("query",timeStamp)
        }
        if len(string(tileSize)) > 0 {
        queryParameters["tileSize"] = autorest.Encode("query",tileSize)
            } else {
            queryParameters["tileSize"] = autorest.Encode("query","256")
        }
        if len(language) > 0 {
        queryParameters["language"] = autorest.Encode("query",language)
        }
        if len(view) > 0 {
        queryParameters["view"] = autorest.Encode("query",view)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/map/tile"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetMapTilePreviewSender sends the GetMapTilePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client RenderV2Client) GetMapTilePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // GetMapTilePreviewResponder handles the response to the GetMapTilePreview request. The method always
    // closes the http.Response Body.
    func (client RenderV2Client) GetMapTilePreviewResponder(resp *http.Response) (result String, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

