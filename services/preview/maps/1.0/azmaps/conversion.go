package azmaps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// ConversionClient is the client for the Conversion methods of the Azmaps service.
type ConversionClient struct {
    BaseClient
}
// NewConversionClient creates an instance of the ConversionClient client.
func NewConversionClient(subscriptionKey string, xMsClientID string) ConversionClient {
    return NewConversionClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewConversionClientWithBaseURI creates an instance of the ConversionClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewConversionClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) ConversionClient {
        return ConversionClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// ConvertPreview **Conversion Create API**
//
// **Applies to:** S1 pricing tier.<br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Conversion API is part of Creator.<br>
//
// The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing
// Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing
// Package](https://aka.ms/am-drawing-package) should first be
// uploaded using the [Azure Maps Data Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the
// `udid` returned by the [Data Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call
// this Conversion API.
//
// ## Convert DWG package
//
// The Conversion API performs a
// [long-running request](https://aka.ms/am-creator-lrt).
//
// ## Debug DWG package issues
//
//
// During the Conversion process, if there are any issues with the DWG package [errors and
// warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to
// visualize
// and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion operation status
// process as detailed
// [here](https://aka.ms/am-creator-lrt) returns the location of the *diagnostic
// package* that can be downloaded by the caller to help them visualize and diagnose these issues. The *diagnostic
// package* location
// can be found in the properties section of the conversion operation status response and looks like the following:
//
// ```json
// {
// "properties": {
// "diagnosticPackageLocation": "https://atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0"
// }
// }
// ```
//
// The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the `diagnosticPackageLocation`.
// For more details on how to use the tool to visualize and diagnose all the errors and warnings see [Drawing Error
// Visualizer](https://aka.ms/am-drawing-errors-visualizer). <br>
//
// A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as *failed*
// if any errors are encountered.
    // Parameters:
        // udid - the unique data id for the content. The `udid` must have been obtained from a successful [Data Upload
        // API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadpreview) call.
        // description - user provided description of the content being converted.
func (client ConversionClient) ConvertPreview(ctx context.Context, udid string, description string) (result ConversionConvertPreviewFuture, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ConversionClient.ConvertPreview")
        defer func() {
            sc := -1
        if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
        sc = result.FutureAPI.Response().StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ConvertPreviewPreparer(ctx, udid, description)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "ConvertPreview", nil , "Failure preparing request")
    return
    }

        result, err = client.ConvertPreviewSender(req)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "ConvertPreview", nil , "Failure sending request")
        return
        }

    return
}

    // ConvertPreviewPreparer prepares the ConvertPreview request.
    func (client ConversionClient) ConvertPreviewPreparer(ctx context.Context, udid string, description string) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "inputType": autorest.Encode("query", "DWG"),
    "udid": autorest.Encode("query",udid),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }
        if len(description) > 0 {
        queryParameters["description"] = autorest.Encode("query",description)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/conversion/convert"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ConvertPreviewSender sends the ConvertPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client ConversionClient) ConvertPreviewSender(req *http.Request) (future ConversionConvertPreviewFuture, err error) {
            var resp *http.Response
            resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
            if err != nil {
            return
            }
            var azf azure.Future
            azf, err = azure.NewFutureFromResponse(resp)
            future.FutureAPI = &azf
            future.Result = future.result
            return
                }

    // ConvertPreviewResponder handles the response to the ConvertPreview request. The method always
    // closes the http.Response Body.
    func (client ConversionClient) ConvertPreviewResponder(resp *http.Response) (result LongRunningOperationResult, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusAccepted),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeletePreview **Conversion Delete API**
//
// **Applies to:** S1 pricing tier.<br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Delete API is part of Creator.<br>
//
// This API allows the caller to delete any data conversions created previously using the [Conversion
// API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
//
// ### Submit Delete Request
//
// To delete your conversion data you will issue a `DELETE` request where the path will contain the `conversionId` of
// the data to delete.
//
// ### Conversion Delete Response
//
// The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data
// resources were deleted successfully.<br>
// A HTTP `400 Bad Request` error response will be returned if no resource associated with the passed-in `conversionId`
// is found.
    // Parameters:
        // conversionID - the conversion id for the content. The `conversionId` must have been obtained from a
        // successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview) call.
func (client ConversionClient) DeletePreview(ctx context.Context, conversionID string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ConversionClient.DeletePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreviewPreparer(ctx, conversionID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "DeletePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeletePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "DeletePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeletePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "DeletePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreviewPreparer prepares the DeletePreview request.
    func (client ConversionClient) DeletePreviewPreparer(ctx context.Context, conversionID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "conversionId": autorest.Encode("path",conversionID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/conversion/{conversionId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeletePreviewSender sends the DeletePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client ConversionClient) DeletePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeletePreviewResponder handles the response to the DeletePreview request. The method always
    // closes the http.Response Body.
    func (client ConversionClient) DeletePreviewResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListPreview **Conversion List API**
//
// **Applies to:** S1 pricing tier.<br>
//
// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and
// SDK. The Conversion API is part of Creator.<br>
//
// This API allows the caller to fetch a list of all successful data conversions submitted previously using the
// [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
//
// ### Submit List Request
//
// To list all successful conversions you will issue a `GET` request with no additional parameters.
//
// ### List Data Response
//
// The Conversion List API returns the complete list of all conversion details in `json` format.<br>
//
// Here is a sample response returning the details of two successful conversion requests:
//
// <br>
//
// ```json
// {
// "conversions":
// [
// {
// "conversionId": "54398242-ea6c-1f31-4fa6-79b1ae0fc24d",
// "udid": "31838736-8b84-11ea-bc55-0242ac130003",
// "created": "5/19/2020 9:00:00 AM +00:00",
// "description": "User provided description.",
// "featureCounts": {
// "DIR": 1,
// "LVL": 3,
// "FCL": 1,
// "UNIT": 150,
// "CTG": 8,
// "AEL": 0,
// "OPN": 10
// }
// },
// {
// "conversionId": "2acf7d32-8b84-11ea-bc55-0242ac130003",
// "udid": "1214bc58-8b84-11ea-bc55-0242ac1300039",
// "created": "5/19/2020 9:00:00 AM +00:00",
// "description": "User provided description.",
// "featureCounts": {
// "DIR": 1,
// "LVL": 3,
// "FCL": 1,
// "UNIT": 150,
// "CTG": 8,
// "AEL": 0,
// "OPN": 10
// }
// }
// ]
// }
// ```
//
// <br>
func (client ConversionClient) ListPreview(ctx context.Context) (result ConversionListResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ConversionClient.ListPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ListPreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "ListPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "ListPreview", resp, "Failure sending request")
        return
        }

        result, err = client.ListPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.ConversionClient", "ListPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // ListPreviewPreparer prepares the ListPreview request.
    func (client ConversionClient) ListPreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/conversion"),
autorest.WithQueryParameters(queryParameters))
        if len(client.XMsClientID) > 0 {
        preparer = autorest.DecoratePreparer(preparer,
        autorest.WithHeader("x-ms-client-id",autorest.String(client.XMsClientID)))
        }
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListPreviewSender sends the ListPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client ConversionClient) ListPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListPreviewResponder handles the response to the ListPreview request. The method always
    // closes the http.Response Body.
    func (client ConversionClient) ListPreviewResponder(resp *http.Response) (result ConversionListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

