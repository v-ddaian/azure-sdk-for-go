package azmaps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
    "context"
    "github.com/Azure/go-autorest/tracing"
)

// AliasClient is the client for the Alias methods of the Azmaps service.
type AliasClient struct {
    BaseClient
}
// NewAliasClient creates an instance of the AliasClient client.
func NewAliasClient(subscriptionKey string, xMsClientID string) AliasClient {
    return NewAliasClientWithBaseURI(DefaultBaseURI, subscriptionKey, xMsClientID)
}

// NewAliasClientWithBaseURI creates an instance of the AliasClient client using a custom endpoint.  Use this when
// interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
    func NewAliasClientWithBaseURI(baseURI string, subscriptionKey string, xMsClientID string) AliasClient {
        return AliasClient{ NewWithBaseURI(baseURI, subscriptionKey, xMsClientID)}
    }

// AssignPreview **Alias - Assign API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// This API allows the caller to assign an alias to reference a resource.<br>
//
//
// ### Submit Assign Request
//
// To assign your alias to a resource, you will use a `PATCH` request with the `aliasId` in the path and the
// `resourceId` passed as a query parameter.<br>
//
//
// ### Create Alias Response
//
// The Assign API returns a HTTP `204 No Content` response with an empty body, if the alias was assigned
// successfully.<br>
    // Parameters:
        // aliasID - the unique id that references an existing alias.
        // resourceID - the unique id that references a resource to be aliased.
func (client AliasClient) AssignPreview(ctx context.Context, aliasID string, resourceID string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.AssignPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.AssignPreviewPreparer(ctx, aliasID, resourceID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "AssignPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.AssignPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "AssignPreview", resp, "Failure sending request")
        return
        }

        result, err = client.AssignPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "AssignPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // AssignPreviewPreparer prepares the AssignPreview request.
    func (client AliasClient) AssignPreviewPreparer(ctx context.Context, aliasID string, resourceID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "aliasId": autorest.Encode("path",aliasID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    "resourceId": autorest.Encode("query",resourceID),
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPatch(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/alias/assign/{aliasId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AssignPreviewSender sends the AssignPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) AssignPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // AssignPreviewResponder handles the response to the AssignPreview request. The method always
    // closes the http.Response Body.
    func (client AliasClient) AssignPreviewResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// CreatePreview **Alias - Create API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// This API allows the caller to create an alias.<br>
// You can also assign the alias during the create request as well.
//
//
// ### Submit Create Request
//
// To create your alias, you will use a `POST` request. If you would like to assign the alias during the creation, you
// will pass the `resourceId` query parameter.<br>
//
//
// ### Create Alias Response
//
// The Create API returns a HTTP `201 Created` response the id of the alias, `aliasId`, in the body.
// The response will look something like:
//
// ```json
// {
// "aliasId" : "d7e5efc8-2239-4387-a286-5bb51aa804e3"
// }
// ```
//
// <br>
func (client AliasClient) CreatePreview(ctx context.Context) (result AliasCreateResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.CreatePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.CreatePreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "CreatePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.CreatePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "CreatePreview", resp, "Failure sending request")
        return
        }

        result, err = client.CreatePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "CreatePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // CreatePreviewPreparer prepares the CreatePreview request.
    func (client AliasClient) CreatePreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsPost(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/alias"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreatePreviewSender sends the CreatePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) CreatePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // CreatePreviewResponder handles the response to the CreatePreview request. The method always
    // closes the http.Response Body.
    func (client AliasClient) CreatePreviewResponder(resp *http.Response) (result AliasCreateResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// DeletePreview **Alias - Delete API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// This API allows the caller to delete a previously created alias.<br>
// You can also use this API to delete old/unused aliases to create space for new content.
// This API does not delete the references resource, only the alias referencing the resource.
//
//
// ### Submit Delete Request
//
// To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias to
// delete.<br>
//
//
// ### Delete Alias Response
//
// The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted
// successfully.<br>
// A HTTP `400 Bad Request` error response will be returned if the alias with the passed-in `aliasId` is not found.
    // Parameters:
        // aliasID - the unique id that references an existing alias.
func (client AliasClient) DeletePreview(ctx context.Context, aliasID string) (result SetObject, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.DeletePreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.DeletePreviewPreparer(ctx, aliasID)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "DeletePreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.DeletePreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "DeletePreview", resp, "Failure sending request")
        return
        }

        result, err = client.DeletePreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "DeletePreview", resp, "Failure responding to request")
        return
        }

    return
}

    // DeletePreviewPreparer prepares the DeletePreview request.
    func (client AliasClient) DeletePreviewPreparer(ctx context.Context, aliasID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "aliasId": autorest.Encode("path",aliasID),
        }

            const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsDelete(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPathParameters("/alias/{aliasId}",pathParameters),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // DeletePreviewSender sends the DeletePreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) DeletePreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // DeletePreviewResponder handles the response to the DeletePreview request. The method always
    // closes the http.Response Body.
    func (client AliasClient) DeletePreviewResponder(resp *http.Response) (result SetObject, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

// ListPreview **Alias - List API**
//
// **Applies to:** S1 pricing tier.
// <br>
//
// This API allows the caller to fetch a list of all previously successfully created aliases.
//
//
// ### Submit List Request
//
// To list all your aliases, you will issue a `GET` request with no additional parameters.<br>
//
//
// ### List Data Response
//
// The List API returns the complete list of all aliases in `json` format. The response contains the following details
// for each alias resource:
//
// > createdTimestamp - The timestamp that the alias was created.
// > aliasId - The id for the alias.
// > resourceId - The id for the resource that this alias references (could be null if the alias has not been
// assigned).
// > lastUpdatedTimestamp - The last time the alias was assigned to a resource.
//
//
// Here's a sample response returning 2 alias resources:
//
// <br>
//
// ```json
// {
// "aliases": [
// {
// "createdTimestamp": "2020-02-13T21:19:11+00:00",
// "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
// "resourceId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
// "lastUpdatedTimestamp": "2020-02-13T21:19:22+00:00"
// },
// {
// "createdTimestamp": "2020-02-18T19:53:33+00:00",
// "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6",
// "resourceId": null,
// "lastUpdatedTimestamp": "2020-02-18T19:53:33+00:00"
// }
// ]
// }
// ```
//
// <br>
func (client AliasClient) ListPreview(ctx context.Context) (result AliasListResponse, err error) {
    if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/AliasClient.ListPreview")
        defer func() {
            sc := -1
        if result.Response.Response != nil {
        sc = result.Response.Response.StatusCode
        }
            tracing.EndSpan(ctx, sc, err)
        }()
    }
    req, err := client.ListPreviewPreparer(ctx)
    if err != nil {
    err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "ListPreview", nil , "Failure preparing request")
    return
    }

        resp, err := client.ListPreviewSender(req)
        if err != nil {
        result.Response = autorest.Response{Response: resp}
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "ListPreview", resp, "Failure sending request")
        return
        }

        result, err = client.ListPreviewResponder(resp)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azmaps.AliasClient", "ListPreview", resp, "Failure responding to request")
        return
        }

    return
}

    // ListPreviewPreparer prepares the ListPreview request.
    func (client AliasClient) ListPreviewPreparer(ctx context.Context) (*http.Request, error) {
        const APIVersion = "1.0"
    queryParameters := map[string]interface{} {
    "api-version": APIVersion,
    }
        if len(client.SubscriptionKey) > 0 {
        queryParameters["subscription-key"] = autorest.Encode("query",client.SubscriptionKey)
        }

    preparer := autorest.CreatePreparer(
autorest.AsGet(),
autorest.WithBaseURL(client.BaseURI),
autorest.WithPath("/alias"),
autorest.WithQueryParameters(queryParameters))
    return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // ListPreviewSender sends the ListPreview request. The method will close the
    // http.Response Body if it receives an error.
    func (client AliasClient) ListPreviewSender(req *http.Request) (*http.Response, error) {
                return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

    // ListPreviewResponder handles the response to the ListPreview request. The method always
    // closes the http.Response Body.
    func (client AliasClient) ListPreviewResponder(resp *http.Response) (result AliasListResponse, err error) {
            err = autorest.Respond(
            resp,
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
            return
    }

