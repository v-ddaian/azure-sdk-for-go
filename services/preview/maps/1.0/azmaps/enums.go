package azmaps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

        // AbsoluteDirection enumerates the values for absolute direction.
    type AbsoluteDirection string

    const (
            // East East
        East AbsoluteDirection = "east"
            // North North
        North AbsoluteDirection = "north"
            // Northeast NorthEast
        Northeast AbsoluteDirection = "northeast"
            // Northwest NorthWest
        Northwest AbsoluteDirection = "northwest"
            // South South
        South AbsoluteDirection = "south"
            // Southeast SouthEast
        Southeast AbsoluteDirection = "southeast"
            // Southwest SouthWest
        Southwest AbsoluteDirection = "southwest"
            // West West
        West AbsoluteDirection = "west"
            )
    // PossibleAbsoluteDirectionValues returns an array of possible values for the AbsoluteDirection const type.
    func PossibleAbsoluteDirectionValues() []AbsoluteDirection {
        return []AbsoluteDirection{East,North,Northeast,Northwest,South,Southeast,Southwest,West}
    }

        // AgencyType enumerates the values for agency type.
    type AgencyType string

    const (
            // AgencyID The Id of the transit agency, e.g. '5872'
        AgencyID AgencyType = "agencyId"
            // AgencyKey The agency’s GTFS Id.<br> **Note**: When this value is used, the metroId parameter is
            // required.
        AgencyKey AgencyType = "agencyKey"
            // AgencyName The name of the transit agency, e.g. Metro Transit.
        AgencyName AgencyType = "agencyName"
            )
    // PossibleAgencyTypeValues returns an array of possible values for the AgencyType const type.
    func PossibleAgencyTypeValues() []AgencyType {
        return []AgencyType{AgencyID,AgencyKey,AgencyName}
    }

        // AlternativeRouteType enumerates the values for alternative route type.
    type AlternativeRouteType string

    const (
            // AnyRoute Allow any alternative route to be returned irrespective of how it compares to the reference
            // route in terms of optimality.
        AnyRoute AlternativeRouteType = "anyRoute"
            // BetterRoute Return an alternative route only if it is better than the reference route according to the
            // given planning criteria.
        BetterRoute AlternativeRouteType = "betterRoute"
            )
    // PossibleAlternativeRouteTypeValues returns an array of possible values for the AlternativeRouteType const type.
    func PossibleAlternativeRouteTypeValues() []AlternativeRouteType {
        return []AlternativeRouteType{AnyRoute,BetterRoute}
    }

        // Avoid enumerates the values for avoid.
    type Avoid string

    const (
            // AlreadyUsedRoads Avoids using the same road multiple times. Most useful in conjunction with
            // `routeType`=thrilling.
        AlreadyUsedRoads Avoid = "alreadyUsedRoads"
            // BorderCrossings Avoids border crossings in route calculation.
        BorderCrossings Avoid = "borderCrossings"
            // Carpools Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes.
        Carpools Avoid = "carpools"
            // Ferries Avoids ferries
        Ferries Avoid = "ferries"
            // Motorways Avoids motorways
        Motorways Avoid = "motorways"
            // TollRoads Avoids toll roads.
        TollRoads Avoid = "tollRoads"
            // UnpavedRoads Avoids unpaved roads
        UnpavedRoads Avoid = "unpavedRoads"
            )
    // PossibleAvoidValues returns an array of possible values for the Avoid const type.
    func PossibleAvoidValues() []Avoid {
        return []Avoid{AlreadyUsedRoads,BorderCrossings,Carpools,Ferries,Motorways,TollRoads,UnpavedRoads}
    }

        // ComputeTravelTimeFor enumerates the values for compute travel time for.
    type ComputeTravelTimeFor string

    const (
            // All Computes travel times for all types of traffic information and specifies all results in the fields
            // noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and
            // liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
        All ComputeTravelTimeFor = "all"
            // None Does not compute additional travel times.
        None ComputeTravelTimeFor = "none"
            )
    // PossibleComputeTravelTimeForValues returns an array of possible values for the ComputeTravelTimeFor const type.
    func PossibleComputeTravelTimeForValues() []ComputeTravelTimeFor {
        return []ComputeTravelTimeFor{All,None}
    }

        // ConnectorSet enumerates the values for connector set.
    type ConnectorSet string

    const (
            // Chademo CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and
            // industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC
            // charging.
        Chademo ConnectorSet = "Chademo"
            // IEC60309AC1PhaseBlue Industrial Blue connector is a connector defined in the IEC 60309 standard. It is
            // sometime referred to as by some combination of the standard, the color and the fact that is a single
            // phase connector. The connector usually has the "P+N+E, 6h" configuration.
        IEC60309AC1PhaseBlue ConnectorSet = "IEC60309AC1PhaseBlue"
            // IEC60309DCWhite Industrial White connector is a DC connector defined in the IEC 60309 standard.
        IEC60309DCWhite ConnectorSet = "IEC60309DCWhite"
            // IEC62196Type1 Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the
            // original manufacturer or SAE J1772 after the standard that first published it. Mostly used in
            // combination with 120V single phase or up to 240V single phase infrastructure.
        IEC62196Type1 ConnectorSet = "IEC62196Type1"
            // IEC62196Type1CCS Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is
            // based on the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct
            // current (DC) contacts to allow DC fast charging.
        IEC62196Type1CCS ConnectorSet = "IEC62196Type1CCS"
            // IEC62196Type2CableAttached Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable
            // and plug attached to the charging point
        IEC62196Type2CableAttached ConnectorSet = "IEC62196Type2CableAttached"
            // IEC62196Type2CCS Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is
            // based on the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct
            // current (DC) contacts to allow DC fast charging.
        IEC62196Type2CCS ConnectorSet = "IEC62196Type2CCS"
            // IEC62196Type2Outlet Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set
            // into the charging point.
        IEC62196Type2Outlet ConnectorSet = "IEC62196Type2Outlet"
            // IEC62196Type3 Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the
            // original manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase
            // infrastructure.
        IEC62196Type3 ConnectorSet = "IEC62196Type3"
            // StandardHouseholdCountrySpecific These are the standard household connectors for a certain region. They
            // are all AC single phase and the standard Voltage and standard Amperage.
            //
            // See also: [Plug & socket types - World
            // Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)
        StandardHouseholdCountrySpecific ConnectorSet = "StandardHouseholdCountrySpecific"
            // Tesla The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to
            // either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North
            // America or the modified Type 2 (DC over Type 2) in Europe.
        Tesla ConnectorSet = "Tesla"
            )
    // PossibleConnectorSetValues returns an array of possible values for the ConnectorSet const type.
    func PossibleConnectorSetValues() []ConnectorSet {
        return []ConnectorSet{Chademo,IEC60309AC1PhaseBlue,IEC60309DCWhite,IEC62196Type1,IEC62196Type1CCS,IEC62196Type2CableAttached,IEC62196Type2CCS,IEC62196Type2Outlet,IEC62196Type3,StandardHouseholdCountrySpecific,Tesla}
    }

        // DestinationType enumerates the values for destination type.
    type DestinationType string

    const (
            // Position The destination of the route as a comma separated string composed by latitude followed by
            // longitude e.g. "47.641268,-122.125679".
        Position DestinationType = "position"
            // StopID The unique Azure Maps identifier for the respective public transit stop. When referring to public
            // transit stops over time, it is recommended to use `stopId` since it will not change, as long as the
            // physical stop exists.
        StopID DestinationType = "stopId"
            // StopKey The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject to
            // change.<br> **Note**: When this value is used, the metroId parameter is required.
        StopKey DestinationType = "stopKey"
            )
    // PossibleDestinationTypeValues returns an array of possible values for the DestinationType const type.
    func PossibleDestinationTypeValues() []DestinationType {
        return []DestinationType{Position,StopID,StopKey}
    }

        // DominantPollutant enumerates the values for dominant pollutant.
    type DominantPollutant string

    const (
            // CarbonMonoxide Carbon monoxide ("CO")
        CarbonMonoxide DominantPollutant = "Carbon Monoxide"
            // NitrogenDioxide Nitrogen dioxide ("NO2")
        NitrogenDioxide DominantPollutant = "Nitrogen Dioxide"
            // Ozone Ozone ("O3")
        Ozone DominantPollutant = "Ozone"
            // ParticulateMatter10 Particulate matter 10 ("PM10")
        ParticulateMatter10 DominantPollutant = "Particulate Matter 10"
            // ParticulateMatter25 Particulate matter 2.5 ("PM2.5")
        ParticulateMatter25 DominantPollutant = "Particulate Matter 2.5"
            // SulfurDioxide Sulfur dioxide ("SO2")
        SulfurDioxide DominantPollutant = "Sulfur Dioxide"
            )
    // PossibleDominantPollutantValues returns an array of possible values for the DominantPollutant const type.
    func PossibleDominantPollutantValues() []DominantPollutant {
        return []DominantPollutant{CarbonMonoxide,NitrogenDioxide,Ozone,ParticulateMatter10,ParticulateMatter25,SulfurDioxide}
    }

        // DrivingSide enumerates the values for driving side.
    type DrivingSide string

    const (
            // LEFT Left side.
        LEFT DrivingSide = "LEFT"
            // RIGHT Right side.
        RIGHT DrivingSide = "RIGHT"
            )
    // PossibleDrivingSideValues returns an array of possible values for the DrivingSide const type.
    func PossibleDrivingSideValues() []DrivingSide {
        return []DrivingSide{LEFT,RIGHT}
    }

        // EntityType enumerates the values for entity type.
    type EntityType string

    const (
            // EntityTypeCountry Country name
        EntityTypeCountry EntityType = "Country"
            // EntityTypeCountrySecondarySubdivision County
        EntityTypeCountrySecondarySubdivision EntityType = "CountrySecondarySubdivision"
            // EntityTypeCountrySubdivision State or Province
        EntityTypeCountrySubdivision EntityType = "CountrySubdivision"
            // EntityTypeCountryTertiarySubdivision Named Area
        EntityTypeCountryTertiarySubdivision EntityType = "CountryTertiarySubdivision"
            // EntityTypeMunicipality City / Town
        EntityTypeMunicipality EntityType = "Municipality"
            // EntityTypeMunicipalitySubdivision Sub / Super City
        EntityTypeMunicipalitySubdivision EntityType = "MunicipalitySubdivision"
            // EntityTypeNeighbourhood Neighbourhood
        EntityTypeNeighbourhood EntityType = "Neighbourhood"
            // EntityTypePostalCodeArea Postal Code / Zip Code
        EntityTypePostalCodeArea EntityType = "PostalCodeArea"
            )
    // PossibleEntityTypeValues returns an array of possible values for the EntityType const type.
    func PossibleEntityTypeValues() []EntityType {
        return []EntityType{EntityTypeCountry,EntityTypeCountrySecondarySubdivision,EntityTypeCountrySubdivision,EntityTypeCountryTertiarySubdivision,EntityTypeMunicipality,EntityTypeMunicipalitySubdivision,EntityTypeNeighbourhood,EntityTypePostalCodeArea}
    }

        // EntryPointType enumerates the values for entry point type.
    type EntryPointType string

    const (
                // Main ...
        Main EntryPointType = "main"
                // Minor ...
        Minor EntryPointType = "minor"
            )
    // PossibleEntryPointTypeValues returns an array of possible values for the EntryPointType const type.
    func PossibleEntryPointTypeValues() []EntryPointType {
        return []EntryPointType{Main,Minor}
    }

        // GeofenceMode enumerates the values for geofence mode.
    type GeofenceMode string

    const (
            // GeofenceModeAll Publish all the query results to Azure Maps account event subscription.
        GeofenceModeAll GeofenceMode = "All"
            // GeofenceModeEnterAndExit Only publish result when user location is considered as crossing geofencing
            // boarder.
        GeofenceModeEnterAndExit GeofenceMode = "EnterAndExit"
            )
    // PossibleGeofenceModeValues returns an array of possible values for the GeofenceMode const type.
    func PossibleGeofenceModeValues() []GeofenceMode {
        return []GeofenceMode{GeofenceModeAll,GeofenceModeEnterAndExit}
    }

        // GeoJSONGeometryType enumerates the values for geo json geometry type.
    type GeoJSONGeometryType string

    const (
            // GeoJSONGeometryTypeGeometryCollection `GeoJSON GeometryCollection` geometry.
        GeoJSONGeometryTypeGeometryCollection GeoJSONGeometryType = "GeometryCollection"
            // GeoJSONGeometryTypeLineString `GeoJSON LineString` geometry.
        GeoJSONGeometryTypeLineString GeoJSONGeometryType = "LineString"
            // GeoJSONGeometryTypeMultiLineString `GeoJSON MultiLineString` geometry.
        GeoJSONGeometryTypeMultiLineString GeoJSONGeometryType = "MultiLineString"
            // GeoJSONGeometryTypeMultiPoint `GeoJSON MultiPoint` geometry.
        GeoJSONGeometryTypeMultiPoint GeoJSONGeometryType = "MultiPoint"
            // GeoJSONGeometryTypeMultiPolygon `GeoJSON MultiPolygon` geometry.
        GeoJSONGeometryTypeMultiPolygon GeoJSONGeometryType = "MultiPolygon"
            // GeoJSONGeometryTypePoint `GeoJSON Point` geometry.
        GeoJSONGeometryTypePoint GeoJSONGeometryType = "Point"
            // GeoJSONGeometryTypePolygon `GeoJSON Polygon` geometry.
        GeoJSONGeometryTypePolygon GeoJSONGeometryType = "Polygon"
            )
    // PossibleGeoJSONGeometryTypeValues returns an array of possible values for the GeoJSONGeometryType const type.
    func PossibleGeoJSONGeometryTypeValues() []GeoJSONGeometryType {
        return []GeoJSONGeometryType{GeoJSONGeometryTypeGeometryCollection,GeoJSONGeometryTypeLineString,GeoJSONGeometryTypeMultiLineString,GeoJSONGeometryTypeMultiPoint,GeoJSONGeometryTypeMultiPolygon,GeoJSONGeometryTypePoint,GeoJSONGeometryTypePolygon}
    }

        // GeometryType enumerates the values for geometry type.
    type GeometryType string

    const (
                // GeometryTypeGeometryCollection ...
        GeometryTypeGeometryCollection GeometryType = "GeometryCollection"
                // GeometryTypeLineString ...
        GeometryTypeLineString GeometryType = "LineString"
                // GeometryTypeMultiLineString ...
        GeometryTypeMultiLineString GeometryType = "MultiLineString"
                // GeometryTypeMultiPoint ...
        GeometryTypeMultiPoint GeometryType = "MultiPoint"
                // GeometryTypeMultiPolygon ...
        GeometryTypeMultiPolygon GeometryType = "MultiPolygon"
                // GeometryTypePoint ...
        GeometryTypePoint GeometryType = "Point"
                // GeometryTypePolygon ...
        GeometryTypePolygon GeometryType = "Polygon"
            )
    // PossibleGeometryTypeValues returns an array of possible values for the GeometryType const type.
    func PossibleGeometryTypeValues() []GeometryType {
        return []GeometryType{GeometryTypeGeometryCollection,GeometryTypeLineString,GeometryTypeMultiLineString,GeometryTypeMultiPoint,GeometryTypeMultiPolygon,GeometryTypePoint,GeometryTypePolygon}
    }

        // GuidanceInstructionType enumerates the values for guidance instruction type.
    type GuidanceInstructionType string

    const (
            // DIRECTIONINFO Direction information.
        DIRECTIONINFO GuidanceInstructionType = "DIRECTION_INFO"
            // LOCATIONARRIVAL Arrival location.
        LOCATIONARRIVAL GuidanceInstructionType = "LOCATION_ARRIVAL"
            // LOCATIONDEPARTURE Departure location.
        LOCATIONDEPARTURE GuidanceInstructionType = "LOCATION_DEPARTURE"
            // LOCATIONWAYPOINT Way point location.
        LOCATIONWAYPOINT GuidanceInstructionType = "LOCATION_WAYPOINT"
            // ROADCHANGE Road Change.
        ROADCHANGE GuidanceInstructionType = "ROAD_CHANGE"
            // TURN Turn.
        TURN GuidanceInstructionType = "TURN"
            )
    // PossibleGuidanceInstructionTypeValues returns an array of possible values for the GuidanceInstructionType const type.
    func PossibleGuidanceInstructionTypeValues() []GuidanceInstructionType {
        return []GuidanceInstructionType{DIRECTIONINFO,LOCATIONARRIVAL,LOCATIONDEPARTURE,LOCATIONWAYPOINT,ROADCHANGE,TURN}
    }

        // GuidanceManeuver enumerates the values for guidance maneuver.
    type GuidanceManeuver string

    const (
            // ARRIVE You have arrived.
        ARRIVE GuidanceManeuver = "ARRIVE"
            // ARRIVELEFT You have arrived. Your destination is on the left.
        ARRIVELEFT GuidanceManeuver = "ARRIVE_LEFT"
            // ARRIVERIGHT You have arrived. Your destination is on the right.
        ARRIVERIGHT GuidanceManeuver = "ARRIVE_RIGHT"
            // BEARLEFT Bear left.
        BEARLEFT GuidanceManeuver = "BEAR_LEFT"
            // BEARRIGHT Bear right.
        BEARRIGHT GuidanceManeuver = "BEAR_RIGHT"
            // DEPART Leave.
        DEPART GuidanceManeuver = "DEPART"
            // ENTERFREEWAY Take the freeway.
        ENTERFREEWAY GuidanceManeuver = "ENTER_FREEWAY"
            // ENTERHIGHWAY Take the highway.
        ENTERHIGHWAY GuidanceManeuver = "ENTER_HIGHWAY"
            // ENTERMOTORWAY Take the motorway.
        ENTERMOTORWAY GuidanceManeuver = "ENTER_MOTORWAY"
            // ENTRANCERAMP Take the ramp.
        ENTRANCERAMP GuidanceManeuver = "ENTRANCE_RAMP"
            // FOLLOW Follow.
        FOLLOW GuidanceManeuver = "FOLLOW"
            // KEEPLEFT Keep left.
        KEEPLEFT GuidanceManeuver = "KEEP_LEFT"
            // KEEPRIGHT Keep right.
        KEEPRIGHT GuidanceManeuver = "KEEP_RIGHT"
            // MAKEUTURN Make a U-turn.
        MAKEUTURN GuidanceManeuver = "MAKE_UTURN"
            // MOTORWAYEXITLEFT Take the left exit.
        MOTORWAYEXITLEFT GuidanceManeuver = "MOTORWAY_EXIT_LEFT"
            // MOTORWAYEXITRIGHT Take the right exit.
        MOTORWAYEXITRIGHT GuidanceManeuver = "MOTORWAY_EXIT_RIGHT"
            // ROUNDABOUTBACK Go around the roundabout.
        ROUNDABOUTBACK GuidanceManeuver = "ROUNDABOUT_BACK"
            // ROUNDABOUTCROSS Cross the roundabout.
        ROUNDABOUTCROSS GuidanceManeuver = "ROUNDABOUT_CROSS"
            // ROUNDABOUTLEFT At the roundabout take the exit on the left.
        ROUNDABOUTLEFT GuidanceManeuver = "ROUNDABOUT_LEFT"
            // ROUNDABOUTRIGHT At the roundabout take the exit on the right.
        ROUNDABOUTRIGHT GuidanceManeuver = "ROUNDABOUT_RIGHT"
            // SHARPLEFT Turn sharp left.
        SHARPLEFT GuidanceManeuver = "SHARP_LEFT"
            // SHARPRIGHT Turn sharp right.
        SHARPRIGHT GuidanceManeuver = "SHARP_RIGHT"
            // STRAIGHT Keep straight on.
        STRAIGHT GuidanceManeuver = "STRAIGHT"
            // SWITCHMAINROAD Switch to the main road.
        SWITCHMAINROAD GuidanceManeuver = "SWITCH_MAIN_ROAD"
            // SWITCHPARALLELROAD Switch to the parallel road.
        SWITCHPARALLELROAD GuidanceManeuver = "SWITCH_PARALLEL_ROAD"
            // TAKEEXIT Take the exit.
        TAKEEXIT GuidanceManeuver = "TAKE_EXIT"
            // TAKEFERRY Take the ferry.
        TAKEFERRY GuidanceManeuver = "TAKE_FERRY"
            // TRYMAKEUTURN Try to make a U-turn.
        TRYMAKEUTURN GuidanceManeuver = "TRY_MAKE_UTURN"
            // TURNLEFT Turn left.
        TURNLEFT GuidanceManeuver = "TURN_LEFT"
            // TURNRIGHT Turn right.
        TURNRIGHT GuidanceManeuver = "TURN_RIGHT"
            // WAYPOINTLEFT You have reached the waypoint. It is on the left.
        WAYPOINTLEFT GuidanceManeuver = "WAYPOINT_LEFT"
            // WAYPOINTREACHED You have reached the waypoint.
        WAYPOINTREACHED GuidanceManeuver = "WAYPOINT_REACHED"
            // WAYPOINTRIGHT You have reached the waypoint. It is on the right.
        WAYPOINTRIGHT GuidanceManeuver = "WAYPOINT_RIGHT"
            )
    // PossibleGuidanceManeuverValues returns an array of possible values for the GuidanceManeuver const type.
    func PossibleGuidanceManeuverValues() []GuidanceManeuver {
        return []GuidanceManeuver{ARRIVE,ARRIVELEFT,ARRIVERIGHT,BEARLEFT,BEARRIGHT,DEPART,ENTERFREEWAY,ENTERHIGHWAY,ENTERMOTORWAY,ENTRANCERAMP,FOLLOW,KEEPLEFT,KEEPRIGHT,MAKEUTURN,MOTORWAYEXITLEFT,MOTORWAYEXITRIGHT,ROUNDABOUTBACK,ROUNDABOUTCROSS,ROUNDABOUTLEFT,ROUNDABOUTRIGHT,SHARPLEFT,SHARPRIGHT,STRAIGHT,SWITCHMAINROAD,SWITCHPARALLELROAD,TAKEEXIT,TAKEFERRY,TRYMAKEUTURN,TURNLEFT,TURNRIGHT,WAYPOINTLEFT,WAYPOINTREACHED,WAYPOINTRIGHT}
    }

        // Hilliness enumerates the values for hilliness.
    type Hilliness string

    const (
            // High high
        High Hilliness = "high"
            // Low low
        Low Hilliness = "low"
            // Normal normal
        Normal Hilliness = "normal"
            )
    // PossibleHillinessValues returns an array of possible values for the Hilliness const type.
    func PossibleHillinessValues() []Hilliness {
        return []Hilliness{High,Low,Normal}
    }

        // IncidentGeometryType enumerates the values for incident geometry type.
    type IncidentGeometryType string

    const (
            // Original Places incidents precisely on the road.
        Original IncidentGeometryType = "original"
            // Shifted Moves the incident slightly (depending on zoom level) to indicate specific road lanes.
        Shifted IncidentGeometryType = "shifted"
            )
    // PossibleIncidentGeometryTypeValues returns an array of possible values for the IncidentGeometryType const type.
    func PossibleIncidentGeometryTypeValues() []IncidentGeometryType {
        return []IncidentGeometryType{Original,Shifted}
    }

        // JunctionType enumerates the values for junction type.
    type JunctionType string

    const (
            // BIFURCATION bifurcation
        BIFURCATION JunctionType = "BIFURCATION"
            // REGULAR regular
        REGULAR JunctionType = "REGULAR"
            // ROUNDABOUT roundabout
        ROUNDABOUT JunctionType = "ROUNDABOUT"
            )
    // PossibleJunctionTypeValues returns an array of possible values for the JunctionType const type.
    func PossibleJunctionTypeValues() []JunctionType {
        return []JunctionType{BIFURCATION,REGULAR,ROUNDABOUT}
    }

        // LatestStatusKeyword enumerates the values for latest status keyword.
    type LatestStatusKeyword string

    const (
            // LatestStatusKeywordCancel "Cancel" - the alert has been canceled prior to its original expiration time.
        LatestStatusKeywordCancel LatestStatusKeyword = "Cancel"
            // LatestStatusKeywordContinue "Continue" - the alert has been updated since its initial issuance, but no
            // changes were made to `alertAreas`, `startTime`, `endTime`, or `class`.
        LatestStatusKeywordContinue LatestStatusKeyword = "Continue"
            // LatestStatusKeywordCorrect "Correct" - the alert has been modified to correct a previous error.
        LatestStatusKeywordCorrect LatestStatusKeyword = "Correct"
            // LatestStatusKeywordExpire "Expire" - the alert has expired and is no longer active.
        LatestStatusKeywordExpire LatestStatusKeyword = "Expire"
            // LatestStatusKeywordExtend "Extend" - the alert has been extended in time, in area, or both since its
            // initial issuance.
        LatestStatusKeywordExtend LatestStatusKeyword = "Extend"
            // LatestStatusKeywordNew "New" - the status of an alert upon initial issuance.
        LatestStatusKeywordNew LatestStatusKeyword = "New"
            // LatestStatusKeywordUpdate "Update" - the alert has been updated since its initial issuance.
        LatestStatusKeywordUpdate LatestStatusKeyword = "Update"
            // LatestStatusKeywordUpgrade "Upgrade" - the alert has been upgraded to a higher class or category since
            // its initial issuance.
        LatestStatusKeywordUpgrade LatestStatusKeyword = "Upgrade"
            )
    // PossibleLatestStatusKeywordValues returns an array of possible values for the LatestStatusKeyword const type.
    func PossibleLatestStatusKeywordValues() []LatestStatusKeyword {
        return []LatestStatusKeyword{LatestStatusKeywordCancel,LatestStatusKeywordContinue,LatestStatusKeywordCorrect,LatestStatusKeywordExpire,LatestStatusKeywordExtend,LatestStatusKeywordNew,LatestStatusKeywordUpdate,LatestStatusKeywordUpgrade}
    }

        // LegType enumerates the values for leg type.
    type LegType string

    const (
            // Bicycle Bicycle
        Bicycle LegType = "Bicycle"
            // Bus Bus
        Bus LegType = "Bus"
            // Cable Cable Car
        Cable LegType = "Cable"
            // Ferry Ferry
        Ferry LegType = "Ferry"
            // Funicular Funicular
        Funicular LegType = "Funicular"
            // Gondola Gondola
        Gondola LegType = "Gondola"
            // PathWayWalk A Leg describing a walk within a compound, e.g. Central Station
        PathWayWalk LegType = "PathWayWalk"
            // Rail Rail
        Rail LegType = "Rail"
            // Subway Subway
        Subway LegType = "Subway"
            // Tram Tram
        Tram LegType = "Tram"
            // Wait A Leg describing a wait for the next public transit leg
        Wait LegType = "Wait"
            // WaitOnVehicle It’s necessary to wait for the next leg on the same vehicle (i.e. the bus will only change
            // its line number)
        WaitOnVehicle LegType = "WaitOnVehicle"
            // Walk Pedestrian walk
        Walk LegType = "Walk"
            )
    // PossibleLegTypeValues returns an array of possible values for the LegType const type.
    func PossibleLegTypeValues() []LegType {
        return []LegType{Bicycle,Bus,Cable,Ferry,Funicular,Gondola,PathWayWalk,Rail,Subway,Tram,Wait,WaitOnVehicle,Walk}
    }

        // MagnitudeOfDelay enumerates the values for magnitude of delay.
    type MagnitudeOfDelay string

    const (
            // Four Undefined, used for road closures and other indefinite delays.
        Four MagnitudeOfDelay = "4"
            // One Minor.
        One MagnitudeOfDelay = "1"
            // Three Major.
        Three MagnitudeOfDelay = "3"
            // Two Moderate.
        Two MagnitudeOfDelay = "2"
            // Zero Unknown.
        Zero MagnitudeOfDelay = "0"
            )
    // PossibleMagnitudeOfDelayValues returns an array of possible values for the MagnitudeOfDelay const type.
    func PossibleMagnitudeOfDelayValues() []MagnitudeOfDelay {
        return []MagnitudeOfDelay{Four,One,Three,Two,Zero}
    }

        // MapImageStyle enumerates the values for map image style.
    type MapImageStyle string

    const (
            // MapImageStyleDark Dark grey version of the Azure Maps main style
        MapImageStyleDark MapImageStyle = "dark"
            // MapImageStyleMain Azure Maps main style
        MapImageStyleMain MapImageStyle = "main"
            )
    // PossibleMapImageStyleValues returns an array of possible values for the MapImageStyle const type.
    func PossibleMapImageStyleValues() []MapImageStyle {
        return []MapImageStyle{MapImageStyleDark,MapImageStyleMain}
    }

        // MapTileLayer enumerates the values for map tile layer.
    type MapTileLayer string

    const (
            // Basic Returns a tile containing all map features including polygons, borders, roads and labels.
        Basic MapTileLayer = "basic"
            // Hybrid Returns a tile containing borders, roads, and labels, and can be overlaid on other tiles (such as
            // satellite imagery) to produce hybrid tiles.
        Hybrid MapTileLayer = "hybrid"
            // Labels Returns a tile of just the map's label information.
        Labels MapTileLayer = "labels"
            // Terra Map canvas complete with shaded relief tiles. Zoom levels 0-6 (inclusive) are supported. Png is
            // the only supported TileFormat and only available MapTileSize is 512.
        Terra MapTileLayer = "terra"
            )
    // PossibleMapTileLayerValues returns an array of possible values for the MapTileLayer const type.
    func PossibleMapTileLayerValues() []MapTileLayer {
        return []MapTileLayer{Basic,Hybrid,Labels,Terra}
    }

        // MapTileSize enumerates the values for map tile size.
    type MapTileSize string

    const (
            // FiveOneTwo Return a 512 by 512 pixel tile.
        FiveOneTwo MapTileSize = "512"
            // TwoFiveSix Return a 256 by 256 pixel tile.
        TwoFiveSix MapTileSize = "256"
            )
    // PossibleMapTileSizeValues returns an array of possible values for the MapTileSize const type.
    func PossibleMapTileSizeValues() []MapTileSize {
        return []MapTileSize{FiveOneTwo,TwoFiveSix}
    }

        // MapTileStyle enumerates the values for map tile style.
    type MapTileStyle string

    const (
            // MapTileStyleDark Dark grey version of the Azure Maps main style. PNG is the only supported TileFormat.
        MapTileStyleDark MapTileStyle = "dark"
            // MapTileStyleMain Azure Maps main style
        MapTileStyleMain MapTileStyle = "main"
            // MapTileStyleShadedRelief Azure Maps main style completed with shaded relief. Supported by Layer terra.
        MapTileStyleShadedRelief MapTileStyle = "shaded_relief"
            )
    // PossibleMapTileStyleValues returns an array of possible values for the MapTileStyle const type.
    func PossibleMapTileStyleValues() []MapTileStyle {
        return []MapTileStyle{MapTileStyleDark,MapTileStyleMain,MapTileStyleShadedRelief}
    }

        // MetroAreaDetailType enumerates the values for metro area detail type.
    type MetroAreaDetailType string

    const (
            // Agencies Return a list of all public transit agencies operating in the given metro area.
        Agencies MetroAreaDetailType = "agencies"
            // AlertDetails Applicable only when alerts are requested. Returns details of the alerts.
        AlertDetails MetroAreaDetailType = "alertDetails"
            // Alerts Returns a list of all active service alerts, that are defined in the metro or agency level, and
            // are not connected to a specific line or stop.
        Alerts MetroAreaDetailType = "alerts"
            // TransitTypes Returns a list of all supported transit types in the given metro area.
        TransitTypes MetroAreaDetailType = "transitTypes"
            )
    // PossibleMetroAreaDetailTypeValues returns an array of possible values for the MetroAreaDetailType const type.
    func PossibleMetroAreaDetailTypeValues() []MetroAreaDetailType {
        return []MetroAreaDetailType{Agencies,AlertDetails,Alerts,TransitTypes}
    }

        // MetroAreaQueryType enumerates the values for metro area query type.
    type MetroAreaQueryType string

    const (
            // MetroAreaQueryTypeCountryCode 2-character [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html)
            // alpha-2 country code. E.g. US.
        MetroAreaQueryTypeCountryCode MetroAreaQueryType = "countryCode"
            // MetroAreaQueryTypePosition The origin of the route as a comma separated string composed by latitude
            // followed by longitude e.g. "47.641268,-122.125679".
        MetroAreaQueryTypePosition MetroAreaQueryType = "position"
            )
    // PossibleMetroAreaQueryTypeValues returns an array of possible values for the MetroAreaQueryType const type.
    func PossibleMetroAreaQueryTypeValues() []MetroAreaQueryType {
        return []MetroAreaQueryType{MetroAreaQueryTypeCountryCode,MetroAreaQueryTypePosition}
    }

        // ModeType enumerates the values for mode type.
    type ModeType string

    const (
            // ModeTypeBike bike
        ModeTypeBike ModeType = "bike"
            // ModeTypePublicTransit public transit
        ModeTypePublicTransit ModeType = "publicTransit"
            // ModeTypeWalk walk (pedestrian)
        ModeTypeWalk ModeType = "walk"
            )
    // PossibleModeTypeValues returns an array of possible values for the ModeType const type.
    func PossibleModeTypeValues() []ModeType {
        return []ModeType{ModeTypeBike,ModeTypePublicTransit,ModeTypeWalk}
    }

        // OpeningHours enumerates the values for opening hours.
    type OpeningHours string

    const (
            // NextSevenDays Shows the hours of operation for the next week, starting with the current day in the local
            // time of the POI.
        NextSevenDays OpeningHours = "nextSevenDays"
            )
    // PossibleOpeningHoursValues returns an array of possible values for the OpeningHours const type.
    func PossibleOpeningHoursValues() []OpeningHours {
        return []OpeningHours{NextSevenDays}
    }

        // OriginType enumerates the values for origin type.
    type OriginType string

    const (
            // OriginTypePosition The origin of the route as a comma separated string composed by latitude followed by
            // longitude e.g. "47.641268,-122.125679".
        OriginTypePosition OriginType = "position"
            // OriginTypeStopID The unique Azure Maps identifier for the respective public transit stop. When referring
            // to public transit stops over time, it is recommended to use `stopId` since it will not change, as long
            // as the physical stop exists
        OriginTypeStopID OriginType = "stopId"
            // OriginTypeStopKey The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are subject
            // to change.<br> **Note**: When this value is used, the metroId parameter is required.
        OriginTypeStopKey OriginType = "stopKey"
            )
    // PossibleOriginTypeValues returns an array of possible values for the OriginType const type.
    func PossibleOriginTypeValues() []OriginType {
        return []OriginType{OriginTypePosition,OriginTypeStopID,OriginTypeStopKey}
    }

        // PollutantType enumerates the values for pollutant type.
    type PollutantType string

    const (
            // CO Carbon monoxide ("CO")
        CO PollutantType = "CO"
            // NO2 Nitrogen dioxide ("NO2")
        NO2 PollutantType = "NO2"
            // O3 Ozone ("O3")
        O3 PollutantType = "O3"
            // PM10 Particulate matter 10 ("PM10")
        PM10 PollutantType = "PM10"
            // PM25 Particulate matter 2.5 ("PM2.5")
        PM25 PollutantType = "PM2.5"
            // SO2 Sulfur dioxide ("SO2")
        SO2 PollutantType = "SO2"
            )
    // PossiblePollutantTypeValues returns an array of possible values for the PollutantType const type.
    func PossiblePollutantTypeValues() []PollutantType {
        return []PollutantType{CO,NO2,O3,PM10,PM25,SO2}
    }

        // RealTimeArrivalsQueryType enumerates the values for real time arrivals query type.
    type RealTimeArrivalsQueryType string

    const (
            // RealTimeArrivalsQueryTypeLine Returns the next live arrival times for each stop within the specified
            // line. lineId, for example, '3785742'.
        RealTimeArrivalsQueryTypeLine RealTimeArrivalsQueryType = "line"
            // RealTimeArrivalsQueryTypeLineAndStop Returns up to three next Live Arrival times for a given line at a
            // given stop. Comma-separated list including lineId and stop identifier, for example, 1228526,14014071
            // (lineId,stopId).
        RealTimeArrivalsQueryTypeLineAndStop RealTimeArrivalsQueryType = "lineAndStop"
            // RealTimeArrivalsQueryTypePosition Returns arrivals of a line to stops near the user’s location. The
            // applicable location query specified as a comma separated string composed by latitude followed by
            // longitude e.g. "47.641268,-122.125679".
        RealTimeArrivalsQueryTypePosition RealTimeArrivalsQueryType = "position"
            // RealTimeArrivalsQueryTypeStops One or multiple stops as a comma separated list. Returns the requested
            // number of live arrivals for all lines arriving at the specified stop. Defined by parameter
            // stopQueryType.
        RealTimeArrivalsQueryTypeStops RealTimeArrivalsQueryType = "stops"
            )
    // PossibleRealTimeArrivalsQueryTypeValues returns an array of possible values for the RealTimeArrivalsQueryType const type.
    func PossibleRealTimeArrivalsQueryTypeValues() []RealTimeArrivalsQueryType {
        return []RealTimeArrivalsQueryType{RealTimeArrivalsQueryTypeLine,RealTimeArrivalsQueryTypeLineAndStop,RealTimeArrivalsQueryTypePosition,RealTimeArrivalsQueryTypeStops}
    }

        // RelativeDirection enumerates the values for relative direction.
    type RelativeDirection string

    const (
            // CircleClockwise Circle clockwise.
        CircleClockwise RelativeDirection = "circleClockwise"
            // CircleCounterclockwise Circle counter clockwise.
        CircleCounterclockwise RelativeDirection = "circleCounterclockwise"
            // Continue Keep going.
        Continue RelativeDirection = "continue"
            // Depart Leave
        Depart RelativeDirection = "depart"
            // Elevator Take the elevator.
        Elevator RelativeDirection = "elevator"
            // HardLeft Turn sharp left.
        HardLeft RelativeDirection = "hardLeft"
            // HardRight Turn sharp right.
        HardRight RelativeDirection = "hardRight"
            // Left Turn left.
        Left RelativeDirection = "left"
            // Right Turn right.
        Right RelativeDirection = "right"
            // SlightlyLeft Turn slightly left.
        SlightlyLeft RelativeDirection = "slightlyLeft"
            // SlightlyRight Turn slightly right.
        SlightlyRight RelativeDirection = "slightlyRight"
            // UturnLeft Make a U-turn left.
        UturnLeft RelativeDirection = "uturnLeft"
            // UturnRight Make a U-turn right.
        UturnRight RelativeDirection = "uturnRight"
            )
    // PossibleRelativeDirectionValues returns an array of possible values for the RelativeDirection const type.
    func PossibleRelativeDirectionValues() []RelativeDirection {
        return []RelativeDirection{CircleClockwise,CircleCounterclockwise,Continue,Depart,Elevator,HardLeft,HardRight,Left,Right,SlightlyLeft,SlightlyRight,UturnLeft,UturnRight}
    }

        // RouteInstructionsType enumerates the values for route instructions type.
    type RouteInstructionsType string

    const (
            // Coded Returns raw instruction data without human-readable messages.
        Coded RouteInstructionsType = "coded"
            // Tagged Returns raw instruction data with tagged human-readable messages to permit formatting. A
            // human-readable message is built up from repeatable identified elements. These are tagged to allow client
            // applications to format them correctly. The following message components are tagged when
            // instructionsType=tagged: street, roadNumber, signpostText, exitNumber, roundaboutExitNumber.
            //
            // Example of tagged 'Turn left' message:​
            //
            // ```
            // Turn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>
            // towards <signpostText>Den Haag</signpostText>
            // ```
        Tagged RouteInstructionsType = "tagged"
            // Text Returns raw instructions data with human-readable messages in plain text.
        Text RouteInstructionsType = "text"
            )
    // PossibleRouteInstructionsTypeValues returns an array of possible values for the RouteInstructionsType const type.
    func PossibleRouteInstructionsTypeValues() []RouteInstructionsType {
        return []RouteInstructionsType{Coded,Tagged,Text}
    }

        // RouteRepresentation enumerates the values for route representation.
    type RouteRepresentation string

    const (
            // RouteRepresentationNone Includes only the optimized waypoint indices but does not include the route
            // geometry in the response.
        RouteRepresentationNone RouteRepresentation = "none"
            // RouteRepresentationPolyline Includes route geometry in the response.
        RouteRepresentationPolyline RouteRepresentation = "polyline"
            // RouteRepresentationSummaryOnly Summary as per polyline but excluding the point geometry elements for the
            // routes in the response.
        RouteRepresentationSummaryOnly RouteRepresentation = "summaryOnly"
            )
    // PossibleRouteRepresentationValues returns an array of possible values for the RouteRepresentation const type.
    func PossibleRouteRepresentationValues() []RouteRepresentation {
        return []RouteRepresentation{RouteRepresentationNone,RouteRepresentationPolyline,RouteRepresentationSummaryOnly}
    }

        // RouteType enumerates the values for route type.
    type RouteType string

    const (
            // Eco A route balanced by economy and speed.
        Eco RouteType = "eco"
            // Fastest The fastest route.
        Fastest RouteType = "fastest"
            // Shortest The shortest route by distance.
        Shortest RouteType = "shortest"
            // Thrilling Includes interesting or challenging roads and uses as few motorways as possible. You can
            // choose the level of turns included and also the degree of hilliness. See the hilliness and windingness
            // parameters for how to set this. There is a limit of 900 km on routes planned with `routeType`=thrilling
        Thrilling RouteType = "thrilling"
            )
    // PossibleRouteTypeValues returns an array of possible values for the RouteType const type.
    func PossibleRouteTypeValues() []RouteType {
        return []RouteType{Eco,Fastest,Shortest,Thrilling}
    }

        // ScheduleType enumerates the values for schedule type.
    type ScheduleType string

    const (
            // RealTime Returned when estimated time of arrival is based on static data.
        RealTime ScheduleType = "realTime"
            // ScheduledTime Returned when estimated time of arrival is based on real-time data.
        ScheduledTime ScheduleType = "scheduledTime"
            )
    // PossibleScheduleTypeValues returns an array of possible values for the ScheduleType const type.
    func PossibleScheduleTypeValues() []ScheduleType {
        return []ScheduleType{RealTime,ScheduledTime}
    }

        // SearchIndexSet enumerates the values for search index set.
    type SearchIndexSet string

    const (
            // Addr Address range interpolation
        Addr SearchIndexSet = "Addr"
            // Geo Geographies
        Geo SearchIndexSet = "Geo"
            // PAD Point Addresses
        PAD SearchIndexSet = "PAD"
            // POI Points of interest
        POI SearchIndexSet = "POI"
            // Str Streets
        Str SearchIndexSet = "Str"
            // Xstr Cross Streets (Intersections)
        Xstr SearchIndexSet = "Xstr"
            )
    // PossibleSearchIndexSetValues returns an array of possible values for the SearchIndexSet const type.
    func PossibleSearchIndexSetValues() []SearchIndexSet {
        return []SearchIndexSet{Addr,Geo,PAD,POI,Str,Xstr}
    }

        // SectionType enumerates the values for section type.
    type SectionType string

    const (
            // SectionTypeCarTrain Get sections if the route includes car trains.
        SectionTypeCarTrain SectionType = "carTrain"
            // SectionTypeCountry Countries the route has parts in.
        SectionTypeCountry SectionType = "country"
            // SectionTypeFerry Get sections if the route includes ferries.
        SectionTypeFerry SectionType = "ferry"
            // SectionTypeMotorway Get sections if the route includes motorways.
        SectionTypeMotorway SectionType = "motorway"
            // SectionTypePedestrian Get sections which are suited for pedestrians.
        SectionTypePedestrian SectionType = "pedestrian"
            // SectionTypeTollRoad Get sections which require a toll to be payed.
        SectionTypeTollRoad SectionType = "tollRoad"
            // SectionTypeTollVignette Get sections which require a toll vignette to be present.
        SectionTypeTollVignette SectionType = "tollVignette"
            // SectionTypeTraffic Get sections which contain traffic information.
        SectionTypeTraffic SectionType = "traffic"
            // SectionTypeTravelMode Get sections in relation to the request parameter `travelMode`.
        SectionTypeTravelMode SectionType = "travelMode"
            // SectionTypeTunnel Get sections if the route includes tunnels.
        SectionTypeTunnel SectionType = "tunnel"
            )
    // PossibleSectionTypeValues returns an array of possible values for the SectionType const type.
    func PossibleSectionTypeValues() []SectionType {
        return []SectionType{SectionTypeCarTrain,SectionTypeCountry,SectionTypeFerry,SectionTypeMotorway,SectionTypePedestrian,SectionTypeTollRoad,SectionTypeTollVignette,SectionTypeTraffic,SectionTypeTravelMode,SectionTypeTunnel}
    }

        // SpeedUnit enumerates the values for speed unit.
    type SpeedUnit string

    const (
            // KMPH Kilometers Per Hour
        KMPH SpeedUnit = "KMPH"
            // MPH Miles Per Hour
        MPH SpeedUnit = "MPH"
            )
    // PossibleSpeedUnitValues returns an array of possible values for the SpeedUnit const type.
    func PossibleSpeedUnitValues() []SpeedUnit {
        return []SpeedUnit{KMPH,MPH}
    }

        // StaticMapLayer enumerates the values for static map layer.
    type StaticMapLayer string

    const (
            // StaticMapLayerBasic Returns an image containing all map features including polygons, borders, roads and
            // labels.
        StaticMapLayerBasic StaticMapLayer = "basic"
            // StaticMapLayerHybrid Returns an image containing borders, roads, and labels, and can be overlaid on
            // other tiles (such as satellite imagery) to produce hybrid tiles.
        StaticMapLayerHybrid StaticMapLayer = "hybrid"
            // StaticMapLayerLabels Returns an image of just the map's label information.
        StaticMapLayerLabels StaticMapLayer = "labels"
            )
    // PossibleStaticMapLayerValues returns an array of possible values for the StaticMapLayer const type.
    func PossibleStaticMapLayerValues() []StaticMapLayer {
        return []StaticMapLayer{StaticMapLayerBasic,StaticMapLayerHybrid,StaticMapLayerLabels}
    }

        // StopQueryType enumerates the values for stop query type.
    type StopQueryType string

    const (
            // StopQueryTypeStopID The unique Azure Maps identifier for the respective public transit stop. When
            // referring to public transit stops over time, it is recommended to use `stopId` since it will not change,
            // as long as the physical stop exists.
        StopQueryTypeStopID StopQueryType = "stopId"
            // StopQueryTypeStopKey The GTFS stop Id. GTFS stop Ids are provided by the transit authority and are
            // subject to change.<br> **Note**: When this value is used, the metroId parameter is required.
        StopQueryTypeStopKey StopQueryType = "stopKey"
            )
    // PossibleStopQueryTypeValues returns an array of possible values for the StopQueryType const type.
    func PossibleStopQueryTypeValues() []StopQueryType {
        return []StopQueryType{StopQueryTypeStopID,StopQueryTypeStopKey}
    }

        // TextFormat enumerates the values for text format.
    type TextFormat string

    const (
            // JSON [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259)
        JSON TextFormat = "json"
            // XML [The Extensible Markup Language](https://www.w3.org/TR/xml/)
        XML TextFormat = "xml"
            )
    // PossibleTextFormatValues returns an array of possible values for the TextFormat const type.
    func PossibleTextFormatValues() []TextFormat {
        return []TextFormat{JSON,XML}
    }

        // TileFormat enumerates the values for tile format.
    type TileFormat string

    const (
            // Pbf Vector graphic in the pbf format. Supports zoom levels 0 through 22.
        Pbf TileFormat = "pbf"
            // Png An image in the png format. Supports zoom levels 0 through 18.
        Png TileFormat = "png"
            )
    // PossibleTileFormatValues returns an array of possible values for the TileFormat const type.
    func PossibleTileFormatValues() []TileFormat {
        return []TileFormat{Pbf,Png}
    }

        // TilesetID enumerates the values for tileset id.
    type TilesetID string

    const (
            // Microsoftbase A base map is a standard map that displays roads, natural and artificial features along
            // with the labels for those features in a vector tile.<br>
            //
            // Supports zoom levels 0 through 22. Format: vector (pbf).
        Microsoftbase TilesetID = "microsoft.base"
            // Microsoftbasedarkgrey All layers with our dark grey style.<br>
            //
            // Supports zoom levels 0 through 22. Format: raster (png).
        Microsoftbasedarkgrey TilesetID = "microsoft.base.darkgrey"
            // Microsoftbasehybrid Displays road, boundary and label data in a vector tile.<br>
            //
            // Supports zoom levels 0 through 22. Format: vector (pbf).
        Microsoftbasehybrid TilesetID = "microsoft.base.hybrid"
            // Microsoftbasehybridroad Road, boundary and label data in our main style.<br>
            //
            // Supports zoom levels 0 through 22. Format: raster (png).
        Microsoftbasehybridroad TilesetID = "microsoft.base.hybrid.road"
            // Microsoftbaselabels Displays labels for roads, natural and artificial features in a vector tile.<br>
            //
            // Supports zoom levels 0 through 22. Format: vector (pbf).
        Microsoftbaselabels TilesetID = "microsoft.base.labels"
            // Microsoftbaselabelsroad Label data in our main style.<br>
            //
            // Supports zoom levels 0 through 22. Format: raster (png).
        Microsoftbaselabelsroad TilesetID = "microsoft.base.labels.road"
            // Microsoftbaseroad All layers with our main style.<br>
            //
            // Supports zoom levels 0 through 22. Format: raster (png).
        Microsoftbaseroad TilesetID = "microsoft.base.road"
            // Microsoftdem Digital Elevation Model tiles. The tiles are in the GeoTIFF format with a single 32-bit
            // floating point band. The tiles cover the whole landmass of Earth. Some small islands (e.g., atolls)
            // might not be represented accurately.<br>
            // * The vertical unit for measurement of elevation height is meters. An elevation value of -32767.0 is
            // used for points that have no data value, most often returned where there isn't landmass (i.e.
            // water).<br>
            // * The horizontal reference datum is the World Geodetic System 1984 (WGS84-G1150) and the vertical
            // reference datum is the Earth Gravitational Model 2008 (EGM2008).<br>
            // * Tiles are 258x258 pixel squares rather than the standard 256 x 256. This is done to allow for accurate
            // interpolation of values at the tile edges. As such adjacent tiles overlap by 1 pixel along all
            // edges.<br>
            // * Tile data comes from the [Airbus WorldDEM4Ortho
            // product](https://www.intelligence-airbusds.com/worlddem-streaming/). Urban areas are approximately
            // leveled down to ground level. All other areas are represented by the object surface level (e.g., trees).
            // <br>
            //
            // Supports zoom level 13 only. Format: raster (tiff).
        Microsoftdem TilesetID = "microsoft.dem"
            // Microsoftimagery A combination of satellite and aerial imagery. Only available in S1 pricing SKU.<br>
            //
            // Supports zoom levels 1 through 19. Format: raster (jpeg).
        Microsoftimagery TilesetID = "microsoft.imagery"
            // Microsoftterramain Shaded relief and terra layers.<br>
            //
            // Supports zoom levels 0 through 6. Format: raster (png).
        Microsoftterramain TilesetID = "microsoft.terra.main"
            // Microsoftweatherinfraredmain Weather infrared tiles. Latest Infrared Satellite images shows clouds by
            // their temperature.  Please see [coverage information](https://aka.ms/AzureMapsWeatherCoverage) for Azure
            // Maps Weather service. To learn more about the returned Satellite data, please see [Weather
            // concepts](https://aka.ms/AzureMapsWeatherConcepts).<br>
            //
            // Supports zoom levels 0 through 15. Format: raster (png).
        Microsoftweatherinfraredmain TilesetID = "microsoft.weather.infrared.main"
            // Microsoftweatherradarmain Weather radar tiles. Latest weather radar images including areas of rain,
            // snow, ice and mixed conditions. Please see [coverage
            // information](https://aka.ms/AzureMapsWeatherCoverage) for Azure Maps Weather service.  To learn more
            // about the Radar data, please see [Weather concepts](https://aka.ms/AzureMapsWeatherConcepts).<br>
            //
            // Supports zoom levels 0 through 15. Format: raster (png).
        Microsoftweatherradarmain TilesetID = "microsoft.weather.radar.main"
            )
    // PossibleTilesetIDValues returns an array of possible values for the TilesetID const type.
    func PossibleTilesetIDValues() []TilesetID {
        return []TilesetID{Microsoftbase,Microsoftbasedarkgrey,Microsoftbasehybrid,Microsoftbasehybridroad,Microsoftbaselabels,Microsoftbaselabelsroad,Microsoftbaseroad,Microsoftdem,Microsoftimagery,Microsoftterramain,Microsoftweatherinfraredmain,Microsoftweatherradarmain}
    }

        // TileSize enumerates the values for tile size.
    type TileSize string

    const (
            // TileSizeFiveOneTwo Return a 512 by 512 pixel tile.  Available for all tilesetIds except for
            // * microsoft.weather.radar.main
            // * microsoft.weather.infrared.main
            // * microsoft.base.hybrid
            // * microsoft.dem
            // * microsoft.imagery
        TileSizeFiveOneTwo TileSize = "512"
            // TileSizeTwoFiveSix Return a 256 by 256 pixel tile. Available for all tilesetIds except for
            // * microsoft.terra.main
        TileSizeTwoFiveSix TileSize = "256"
            )
    // PossibleTileSizeValues returns an array of possible values for the TileSize const type.
    func PossibleTileSizeValues() []TileSize {
        return []TileSize{TileSizeFiveOneTwo,TileSizeTwoFiveSix}
    }

        // TimeType enumerates the values for time type.
    type TimeType string

    const (
            // Arrival arrival at the destination point. Requires that 'time' value must be in the future.
        Arrival TimeType = "arrival"
            // Departure Request departure at the destination point. Requires that 'time' value must be now or in the
            // future.
        Departure TimeType = "departure"
            // Last Request the last lines for the day.
        Last TimeType = "last"
            )
    // PossibleTimeTypeValues returns an array of possible values for the TimeType const type.
    func PossibleTimeTypeValues() []TimeType {
        return []TimeType{Arrival,Departure,Last}
    }

        // TimezoneOptions enumerates the values for timezone options.
    type TimezoneOptions string

    const (
            // TimezoneOptionsAll Include both zoneinfo and transitions in the result.
        TimezoneOptionsAll TimezoneOptions = "all"
            // TimezoneOptionsNone Do not include zoneinfo or transitions in the result.
        TimezoneOptionsNone TimezoneOptions = "none"
            // TimezoneOptionsTransitions Include transition information in the result (The number of transitions is
            // currently capped at 250).
        TimezoneOptionsTransitions TimezoneOptions = "transitions"
            // TimezoneOptionsZoneInfo Include additional time zone info in the result.
        TimezoneOptionsZoneInfo TimezoneOptions = "zoneInfo"
            )
    // PossibleTimezoneOptionsValues returns an array of possible values for the TimezoneOptions const type.
    func PossibleTimezoneOptionsValues() []TimezoneOptions {
        return []TimezoneOptions{TimezoneOptionsAll,TimezoneOptionsNone,TimezoneOptionsTransitions,TimezoneOptionsZoneInfo}
    }

        // TrafficFlowSegmentStyle enumerates the values for traffic flow segment style.
    type TrafficFlowSegmentStyle string

    const (
                // Absolute ...
        Absolute TrafficFlowSegmentStyle = "absolute"
                // Relative ...
        Relative TrafficFlowSegmentStyle = "relative"
                // RelativeDelay ...
        RelativeDelay TrafficFlowSegmentStyle = "relative-delay"
            )
    // PossibleTrafficFlowSegmentStyleValues returns an array of possible values for the TrafficFlowSegmentStyle const type.
    func PossibleTrafficFlowSegmentStyleValues() []TrafficFlowSegmentStyle {
        return []TrafficFlowSegmentStyle{Absolute,Relative,RelativeDelay}
    }

        // TrafficFlowTileStyle enumerates the values for traffic flow tile style.
    type TrafficFlowTileStyle string

    const (
            // TrafficFlowTileStyleAbsolute Colors will reflect the absolute speed measured. Absolute speed is the
            // capability to access the full speed.
        TrafficFlowTileStyleAbsolute TrafficFlowTileStyle = "absolute"
            // TrafficFlowTileStyleReducedSensitivity Displays relative colors but a larger difference from freeflow is
            // required for segments to change the color. This mode only valid when format is png.
        TrafficFlowTileStyleReducedSensitivity TrafficFlowTileStyle = "reduced-sensitivity"
            // TrafficFlowTileStyleRelative This is the speed relative to free-flow, highlighting areas of congestion
            // visualizing the traffic flow. Free-flow refers to conditions where there is no congestion and traffic
            // can follow the speed limits. The most used option to visualize traffic flow on a map.
        TrafficFlowTileStyleRelative TrafficFlowTileStyle = "relative"
            // TrafficFlowTileStyleRelativeDelay Displays relative colors only where they are different from the
            // free-flow speeds. This option will only highlights areas of congestion.
        TrafficFlowTileStyleRelativeDelay TrafficFlowTileStyle = "relative-delay"
            )
    // PossibleTrafficFlowTileStyleValues returns an array of possible values for the TrafficFlowTileStyle const type.
    func PossibleTrafficFlowTileStyleValues() []TrafficFlowTileStyle {
        return []TrafficFlowTileStyle{TrafficFlowTileStyleAbsolute,TrafficFlowTileStyleReducedSensitivity,TrafficFlowTileStyleRelative,TrafficFlowTileStyleRelativeDelay}
    }

        // TrafficIncidentDetailStyle enumerates the values for traffic incident detail style.
    type TrafficIncidentDetailStyle string

    const (
            // Night Night style.
        Night TrafficIncidentDetailStyle = "night"
            // S1 Creates traffic lines with colored chevrons indicating severity.
        S1 TrafficIncidentDetailStyle = "s1"
            // S2 Creates plain lines with certain degree of glow.
        S2 TrafficIncidentDetailStyle = "s2"
            // S3 Creates plain lines with certain degree of glow.
        S3 TrafficIncidentDetailStyle = "s3"
            )
    // PossibleTrafficIncidentDetailStyleValues returns an array of possible values for the TrafficIncidentDetailStyle const type.
    func PossibleTrafficIncidentDetailStyleValues() []TrafficIncidentDetailStyle {
        return []TrafficIncidentDetailStyle{Night,S1,S2,S3}
    }

        // TrafficIncidentTileStyle enumerates the values for traffic incident tile style.
    type TrafficIncidentTileStyle string

    const (
            // TrafficIncidentTileStyleNight Night style.
        TrafficIncidentTileStyleNight TrafficIncidentTileStyle = "night"
            // TrafficIncidentTileStyleS1 Creates traffic lines with colored chevrons indicating severity.
        TrafficIncidentTileStyleS1 TrafficIncidentTileStyle = "s1"
            // TrafficIncidentTileStyleS2 Creates plain lines with certain degree of glow.
        TrafficIncidentTileStyleS2 TrafficIncidentTileStyle = "s2"
            // TrafficIncidentTileStyleS3 Creates plain lines with certain degree of glow.
        TrafficIncidentTileStyleS3 TrafficIncidentTileStyle = "s3"
            )
    // PossibleTrafficIncidentTileStyleValues returns an array of possible values for the TrafficIncidentTileStyle const type.
    func PossibleTrafficIncidentTileStyleValues() []TrafficIncidentTileStyle {
        return []TrafficIncidentTileStyle{TrafficIncidentTileStyleNight,TrafficIncidentTileStyleS1,TrafficIncidentTileStyleS2,TrafficIncidentTileStyleS3}
    }

        // TransitItineraryDetailType enumerates the values for transit itinerary detail type.
    type TransitItineraryDetailType string

    const (
            // Geometry Shape of an in GeoJSON format. For public transit legs will return also the stops that the leg
            // passes through. For walk and bike legs, will return also the turn-by-turn navigation data.
        Geometry TransitItineraryDetailType = "geometry"
            // Schedule Static schedule data as to all departures of Public Transit legs from the current time of the
            // day to the end of the current day.
        Schedule TransitItineraryDetailType = "schedule"
            )
    // PossibleTransitItineraryDetailTypeValues returns an array of possible values for the TransitItineraryDetailType const type.
    func PossibleTransitItineraryDetailTypeValues() []TransitItineraryDetailType {
        return []TransitItineraryDetailType{Geometry,Schedule}
    }

        // TransitLineDetailType enumerates the values for transit line detail type.
    type TransitLineDetailType string

    const (
            // TransitLineDetailTypeAlertDetails Can only be used in conjunction with detailType=alerts.Return
            // additional details associated with the active service alerts.
        TransitLineDetailTypeAlertDetails TransitLineDetailType = "alertDetails"
            // TransitLineDetailTypeAlerts Return any active service alerts for the specified stop. Response provides
            // brief information for disruption in service and all basic data associated with the alert.
        TransitLineDetailTypeAlerts TransitLineDetailType = "alerts"
            // TransitLineDetailTypeLines Return transit lines that stops at the specified stop.
        TransitLineDetailTypeLines TransitLineDetailType = "lines"
            // TransitLineDetailTypePatterns Return list of patterns this group is comprised of. A pattern consists of
            // a stop sequence and shape per line.
        TransitLineDetailTypePatterns TransitLineDetailType = "patterns"
            // TransitLineDetailTypeSchedule Return a 24h static schedule for the specified line group from the current
            // time of the day to the end of the current day.
        TransitLineDetailTypeSchedule TransitLineDetailType = "schedule"
            // TransitLineDetailTypeStops Return list of stops the line group goes through.
        TransitLineDetailTypeStops TransitLineDetailType = "stops"
            )
    // PossibleTransitLineDetailTypeValues returns an array of possible values for the TransitLineDetailType const type.
    func PossibleTransitLineDetailTypeValues() []TransitLineDetailType {
        return []TransitLineDetailType{TransitLineDetailTypeAlertDetails,TransitLineDetailTypeAlerts,TransitLineDetailTypeLines,TransitLineDetailTypePatterns,TransitLineDetailTypeSchedule,TransitLineDetailTypeStops}
    }

        // TransitRouteType enumerates the values for transit route type.
    type TransitRouteType string

    const (
            // LeastTransfers Route with least transfers.
        LeastTransfers TransitRouteType = "leastTransfers"
            // LeastWalk Route with least walk.
        LeastWalk TransitRouteType = "leastWalk"
            // Optimal The best optimal route.
        Optimal TransitRouteType = "optimal"
            )
    // PossibleTransitRouteTypeValues returns an array of possible values for the TransitRouteType const type.
    func PossibleTransitRouteTypeValues() []TransitRouteType {
        return []TransitRouteType{LeastTransfers,LeastWalk,Optimal}
    }

        // TransitStopDetailType enumerates the values for transit stop detail type.
    type TransitStopDetailType string

    const (
            // TransitStopDetailTypeAlertDetails Can only be used in conjunction with detailType=alerts.Return
            // additional details associated with the active service alerts.
        TransitStopDetailTypeAlertDetails TransitStopDetailType = "alertDetails"
            // TransitStopDetailTypeAlerts Return any active service alerts for the specified stop. Response provides
            // brief information for disruption in service and all basic data associated with the alert.
        TransitStopDetailTypeAlerts TransitStopDetailType = "alerts"
            // TransitStopDetailTypeLineGroups Return line groups that stops at the specified stop.
        TransitStopDetailTypeLineGroups TransitStopDetailType = "lineGroups"
            // TransitStopDetailTypeLines Return transit lines that stops at the specified stop.
        TransitStopDetailTypeLines TransitStopDetailType = "lines"
            )
    // PossibleTransitStopDetailTypeValues returns an array of possible values for the TransitStopDetailType const type.
    func PossibleTransitStopDetailTypeValues() []TransitStopDetailType {
        return []TransitStopDetailType{TransitStopDetailTypeAlertDetails,TransitStopDetailTypeAlerts,TransitStopDetailTypeLineGroups,TransitStopDetailTypeLines}
    }

        // TransitStopQueryType enumerates the values for transit stop query type.
    type TransitStopQueryType string

    const (
            // TransitStopQueryTypeStopID The unique Azure Maps identifier for the respective public transit stop. When
            // referring to public transit stops over time, it is recommended to use `stopId` since it will not change,
            // as long as the physical stop exists
        TransitStopQueryTypeStopID TransitStopQueryType = "stopId"
            // TransitStopQueryTypeStopKey The GTFS stop Id. GTFS stop Ids are provided by the transit authority and
            // are subject to change.<br> **Note**: When this value is used, the metroId parameter is required.
        TransitStopQueryTypeStopKey TransitStopQueryType = "stopKey"
            )
    // PossibleTransitStopQueryTypeValues returns an array of possible values for the TransitStopQueryType const type.
    func PossibleTransitStopQueryTypeValues() []TransitStopQueryType {
        return []TransitStopQueryType{TransitStopQueryTypeStopID,TransitStopQueryTypeStopKey}
    }

        // TransitType enumerates the values for transit type.
    type TransitType string

    const (
            // TransitTypeBus bus
        TransitTypeBus TransitType = "Bus"
            // TransitTypeCableCar cableCar
        TransitTypeCableCar TransitType = "CableCar"
            // TransitTypeFerry ferry
        TransitTypeFerry TransitType = "Ferry"
            // TransitTypeFunicular funicular
        TransitTypeFunicular TransitType = "Funicular"
            // TransitTypeGondola gondola
        TransitTypeGondola TransitType = "Gondola"
            // TransitTypeRail rail
        TransitTypeRail TransitType = "Rail"
            // TransitTypeSubway subway
        TransitTypeSubway TransitType = "Subway"
            // TransitTypeTram tram
        TransitTypeTram TransitType = "Tram"
            )
    // PossibleTransitTypeValues returns an array of possible values for the TransitType const type.
    func PossibleTransitTypeValues() []TransitType {
        return []TransitType{TransitTypeBus,TransitTypeCableCar,TransitTypeFerry,TransitTypeFunicular,TransitTypeGondola,TransitTypeRail,TransitTypeSubway,TransitTypeTram}
    }

        // TransitTypeFilter enumerates the values for transit type filter.
    type TransitTypeFilter string

    const (
            // TransitTypeFilterBus bus
        TransitTypeFilterBus TransitTypeFilter = "bus"
            // TransitTypeFilterCableCar cableCar
        TransitTypeFilterCableCar TransitTypeFilter = "cableCar"
            // TransitTypeFilterFerry ferry
        TransitTypeFilterFerry TransitTypeFilter = "ferry"
            // TransitTypeFilterFunicular funicular
        TransitTypeFilterFunicular TransitTypeFilter = "funicular"
            // TransitTypeFilterGondola gondola
        TransitTypeFilterGondola TransitTypeFilter = "gondola"
            // TransitTypeFilterRail rail
        TransitTypeFilterRail TransitTypeFilter = "rail"
            // TransitTypeFilterSubway subway
        TransitTypeFilterSubway TransitTypeFilter = "subway"
            // TransitTypeFilterTram tram
        TransitTypeFilterTram TransitTypeFilter = "tram"
            )
    // PossibleTransitTypeFilterValues returns an array of possible values for the TransitTypeFilter const type.
    func PossibleTransitTypeFilterValues() []TransitTypeFilter {
        return []TransitTypeFilter{TransitTypeFilterBus,TransitTypeFilterCableCar,TransitTypeFilterFerry,TransitTypeFilterFunicular,TransitTypeFilterGondola,TransitTypeFilterRail,TransitTypeFilterSubway,TransitTypeFilterTram}
    }

        // TravelMode enumerates the values for travel mode.
    type TravelMode string

    const (
            // TravelModeBicycle The returned routes are optimized for bicycles, including use of bicycle lanes.
        TravelModeBicycle TravelMode = "bicycle"
            // TravelModeBus The returned routes are optimized for buses, including the use of bus only lanes. BETA
            // functionality.
        TravelModeBus TravelMode = "bus"
            // TravelModeCar The returned routes are optimized for cars.
        TravelModeCar TravelMode = "car"
            // TravelModeMotorcycle The returned routes are optimized for motorcycles. BETA functionality.
        TravelModeMotorcycle TravelMode = "motorcycle"
            // TravelModePedestrian The returned routes are optimized for pedestrians, including the use of sidewalks.
        TravelModePedestrian TravelMode = "pedestrian"
            // TravelModeTaxi The returned routes are optimized for taxis. BETA functionality.
        TravelModeTaxi TravelMode = "taxi"
            // TravelModeTruck The returned routes are optimized for commercial vehicles, like for trucks.
        TravelModeTruck TravelMode = "truck"
            // TravelModeVan The returned routes are optimized for vans. BETA functionality.
        TravelModeVan TravelMode = "van"
            )
    // PossibleTravelModeValues returns an array of possible values for the TravelMode const type.
    func PossibleTravelModeValues() []TravelMode {
        return []TravelMode{TravelModeBicycle,TravelModeBus,TravelModeCar,TravelModeMotorcycle,TravelModePedestrian,TravelModeTaxi,TravelModeTruck,TravelModeVan}
    }

        // Type enumerates the values for type.
    type Type string

    const (
            // Failed The request has one or more failures.
        Failed Type = "Failed"
            // NotStarted The request has not started processing yet.
        NotStarted Type = "NotStarted"
            // Running The request has started processing.
        Running Type = "Running"
            // Succeeded The request has successfully completed.
        Succeeded Type = "Succeeded"
            )
    // PossibleTypeValues returns an array of possible values for the Type const type.
    func PossibleTypeValues() []Type {
        return []Type{Failed,NotStarted,Running,Succeeded}
    }

        // TypeBasicGeoJSONGeometry enumerates the values for type basic geo json geometry.
    type TypeBasicGeoJSONGeometry string

    const (
                // TypeGeoJSONGeometry ...
        TypeGeoJSONGeometry TypeBasicGeoJSONGeometry = "GeoJSONGeometry"
            )
    // PossibleTypeBasicGeoJSONGeometryValues returns an array of possible values for the TypeBasicGeoJSONGeometry const type.
    func PossibleTypeBasicGeoJSONGeometryValues() []TypeBasicGeoJSONGeometry {
        return []TypeBasicGeoJSONGeometry{TypeGeoJSONGeometry}
    }

        // TypeBasicStyleRuleBase enumerates the values for type basic style rule base.
    type TypeBasicStyleRuleBase string

    const (
                // TypeBooleanTypeStyleRule ...
        TypeBooleanTypeStyleRule TypeBasicStyleRuleBase = "BooleanTypeStyleRule"
                // TypeNumberTypeStyleRule ...
        TypeNumberTypeStyleRule TypeBasicStyleRuleBase = "NumberTypeStyleRule"
                // TypeStringTypeStyleRule ...
        TypeStringTypeStyleRule TypeBasicStyleRuleBase = "StringTypeStyleRule"
                // TypeStyleRuleBase ...
        TypeStyleRuleBase TypeBasicStyleRuleBase = "StyleRuleBase"
            )
    // PossibleTypeBasicStyleRuleBaseValues returns an array of possible values for the TypeBasicStyleRuleBase const type.
    func PossibleTypeBasicStyleRuleBaseValues() []TypeBasicStyleRuleBase {
        return []TypeBasicStyleRuleBase{TypeBooleanTypeStyleRule,TypeNumberTypeStyleRule,TypeStringTypeStyleRule,TypeStyleRuleBase}
    }

        // Unit enumerates the values for unit.
    type Unit string

    const (
            // Imperial Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
        Imperial Unit = "imperial"
            // Metric Return data in metric units. Some example units of metric system are Celsius and kilometer.
        Metric Unit = "metric"
            )
    // PossibleUnitValues returns an array of possible values for the Unit const type.
    func PossibleUnitValues() []Unit {
        return []Unit{Imperial,Metric}
    }

        // UploadDataFormat enumerates the values for upload data format.
    type UploadDataFormat string

    const (
            // Geojson [GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange
            // format.
        Geojson UploadDataFormat = "geojson"
            // Zip Compressed data format.
        Zip UploadDataFormat = "zip"
            )
    // PossibleUploadDataFormatValues returns an array of possible values for the UploadDataFormat const type.
    func PossibleUploadDataFormatValues() []UploadDataFormat {
        return []UploadDataFormat{Geojson,Zip}
    }

        // VehicleEngineType enumerates the values for vehicle engine type.
    type VehicleEngineType string

    const (
            // Combustion Internal combustion engine.
        Combustion VehicleEngineType = "combustion"
            // Electric Electric engine.
        Electric VehicleEngineType = "electric"
            )
    // PossibleVehicleEngineTypeValues returns an array of possible values for the VehicleEngineType const type.
    func PossibleVehicleEngineTypeValues() []VehicleEngineType {
        return []VehicleEngineType{Combustion,Electric}
    }

        // VehicleLoadType enumerates the values for vehicle load type.
    type VehicleLoadType string

    const (
            // OtherHazmatExplosive Explosives
        OtherHazmatExplosive VehicleLoadType = "otherHazmatExplosive"
            // OtherHazmatGeneral Miscellaneous
        OtherHazmatGeneral VehicleLoadType = "otherHazmatGeneral"
            // OtherHazmatHarmfulToWater Harmful to water
        OtherHazmatHarmfulToWater VehicleLoadType = "otherHazmatHarmfulToWater"
            // USHazmatClass1 Explosives
        USHazmatClass1 VehicleLoadType = "USHazmatClass1"
            // USHazmatClass2 Compressed gas
        USHazmatClass2 VehicleLoadType = "USHazmatClass2"
            // USHazmatClass3 Flammable liquids
        USHazmatClass3 VehicleLoadType = "USHazmatClass3"
            // USHazmatClass4 Flammable solids
        USHazmatClass4 VehicleLoadType = "USHazmatClass4"
            // USHazmatClass5 Oxidizers
        USHazmatClass5 VehicleLoadType = "USHazmatClass5"
            // USHazmatClass6 Poisons
        USHazmatClass6 VehicleLoadType = "USHazmatClass6"
            // USHazmatClass7 Radioactive
        USHazmatClass7 VehicleLoadType = "USHazmatClass7"
            // USHazmatClass8 Corrosives
        USHazmatClass8 VehicleLoadType = "USHazmatClass8"
            // USHazmatClass9 Miscellaneous
        USHazmatClass9 VehicleLoadType = "USHazmatClass9"
            )
    // PossibleVehicleLoadTypeValues returns an array of possible values for the VehicleLoadType const type.
    func PossibleVehicleLoadTypeValues() []VehicleLoadType {
        return []VehicleLoadType{OtherHazmatExplosive,OtherHazmatGeneral,OtherHazmatHarmfulToWater,USHazmatClass1,USHazmatClass2,USHazmatClass3,USHazmatClass4,USHazmatClass5,USHazmatClass6,USHazmatClass7,USHazmatClass8,USHazmatClass9}
    }

        // Windingness enumerates the values for windingness.
    type Windingness string

    const (
            // WindingnessHigh high
        WindingnessHigh Windingness = "high"
            // WindingnessLow low
        WindingnessLow Windingness = "low"
            // WindingnessNormal normal
        WindingnessNormal Windingness = "normal"
            )
    // PossibleWindingnessValues returns an array of possible values for the Windingness const type.
    func PossibleWindingnessValues() []Windingness {
        return []Windingness{WindingnessHigh,WindingnessLow,WindingnessNormal}
    }

